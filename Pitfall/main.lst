                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.8.0 #10562 (Mac OS X x86_64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _pool
                                     12 	.globl _gator2_raw
                                     13 	.globl _gator1_raw
                                     14 	.globl _harry_raw
                                     15 	.globl _pallet
                                     16 	.globl _ST7735_Write
                                     17 	.globl _SPI_transfer
                                     18 	.globl _SPI_write
                                     19 	.globl _SPI_init
                                     20 	.globl _main
                                     21 	.globl _drawGator
                                     22 	.globl _clearHarry
                                     23 	.globl _drawHarry
                                     24 	.globl _drawscene
                                     25 	.globl _init_clock
                                     26 	.globl _clock
                                     27 	.globl _ST7735_Write16
                                     28 	.globl _ST7735_SetAddrWindow
                                     29 	.globl _ST7735_DrawPixel
                                     30 	.globl _ST7735_DrawLine
                                     31 	.globl _ST7735_Init
                                     32 	.globl _ST7735_Clear
                                     33 	.globl _ST7735_Draw
                                     34 	.globl _ST7735_Fill
                                     35 ;--------------------------------------------------------
                                     36 ; ram data
                                     37 ;--------------------------------------------------------
                                     38 	.area DATA
                                     39 ;--------------------------------------------------------
                                     40 ; ram data
                                     41 ;--------------------------------------------------------
                                     42 	.area INITIALIZED
                                     43 ;--------------------------------------------------------
                                     44 ; Stack segment in internal ram 
                                     45 ;--------------------------------------------------------
                                     46 	.area	SSEG
      000000                         47 __start__stack:
      000000                         48 	.ds	1
                                     49 
                                     50 ;--------------------------------------------------------
                                     51 ; absolute external ram data
                                     52 ;--------------------------------------------------------
                                     53 	.area DABS (ABS)
                                     54 
                                     55 ; default segment ordering for linker
                                     56 	.area HOME
                                     57 	.area GSINIT
                                     58 	.area GSFINAL
                                     59 	.area CONST
                                     60 	.area INITIALIZER
                                     61 	.area CODE
                                     62 
                                     63 ;--------------------------------------------------------
                                     64 ; interrupt vector 
                                     65 ;--------------------------------------------------------
                                     66 	.area HOME
      000000                         67 __interrupt_vect:
      000000 82v00u00u00             68 	int s_GSINIT ; reset
                                     69 ;--------------------------------------------------------
                                     70 ; global & static initialisations
                                     71 ;--------------------------------------------------------
                                     72 	.area HOME
                                     73 	.area GSINIT
                                     74 	.area GSFINAL
                                     75 	.area GSINIT
      000000                         76 __sdcc_gs_init_startup:
      000000                         77 __sdcc_init_data:
                                     78 ; stm8_genXINIT() start
      000000 AEr00r00         [ 2]   79 	ldw x, #l_DATA
      000003 27 07            [ 1]   80 	jreq	00002$
      000005                         81 00001$:
      000005 72 4FuFFuFF      [ 1]   82 	clr (s_DATA - 1, x)
      000009 5A               [ 2]   83 	decw x
      00000A 26 F9            [ 1]   84 	jrne	00001$
      00000C                         85 00002$:
      00000C AEr00r00         [ 2]   86 	ldw	x, #l_INITIALIZER
      00000F 27 09            [ 1]   87 	jreq	00004$
      000011                         88 00003$:
      000011 D6uFFuFF         [ 1]   89 	ld	a, (s_INITIALIZER - 1, x)
      000014 D7uFFuFF         [ 1]   90 	ld	(s_INITIALIZED - 1, x), a
      000017 5A               [ 2]   91 	decw	x
      000018 26 F7            [ 1]   92 	jrne	00003$
      00001A                         93 00004$:
                                     94 ; stm8_genXINIT() end
                                     95 	.area GSFINAL
      000000 CCr00r04         [ 2]   96 	jp	__sdcc_program_startup
                                     97 ;--------------------------------------------------------
                                     98 ; Home
                                     99 ;--------------------------------------------------------
                                    100 	.area HOME
                                    101 	.area HOME
      000004                        102 __sdcc_program_startup:
      000004 CCr04rAC         [ 2]  103 	jp	_main
                                    104 ;	return from main will return to caller
                                    105 ;--------------------------------------------------------
                                    106 ; code
                                    107 ;--------------------------------------------------------
                                    108 	.area CODE
                                    109 ;	main.c: 30: static inline void delay_ms(uint16_t ms) {
                                    110 ;	-----------------------------------------
                                    111 ;	 function delay_ms
                                    112 ;	-----------------------------------------
      000000                        113 _delay_ms:
      000000 52 08            [ 2]  114 	sub	sp, #8
                                    115 ;	main.c: 32: for (i = 0; i < ((F_CPU / 18000UL) * ms); i++)
      000002 5F               [ 1]  116 	clrw	x
      000003 1F 07            [ 2]  117 	ldw	(0x07, sp), x
      000005 1F 05            [ 2]  118 	ldw	(0x05, sp), x
      000007                        119 00103$:
      000007 1E 0B            [ 2]  120 	ldw	x, (0x0b, sp)
      000009 89               [ 2]  121 	pushw	x
      00000A 4B 6F            [ 1]  122 	push	#0x6f
      00000C 4B 00            [ 1]  123 	push	#0x00
      00000E CDr00r00         [ 4]  124 	call	___muluint2ulong
      000011 5B 04            [ 2]  125 	addw	sp, #4
      000013 1F 03            [ 2]  126 	ldw	(0x03, sp), x
      000015 17 01            [ 2]  127 	ldw	(0x01, sp), y
      000017 1E 07            [ 2]  128 	ldw	x, (0x07, sp)
      000019 13 03            [ 2]  129 	cpw	x, (0x03, sp)
      00001B 7B 06            [ 1]  130 	ld	a, (0x06, sp)
      00001D 12 02            [ 1]  131 	sbc	a, (0x02, sp)
      00001F 7B 05            [ 1]  132 	ld	a, (0x05, sp)
      000021 12 01            [ 1]  133 	sbc	a, (0x01, sp)
      000023 24 0F            [ 1]  134 	jrnc	00105$
                                    135 ;	main.c: 33: __asm__("nop");
      000025 9D               [ 1]  136 	nop
                                    137 ;	main.c: 32: for (i = 0; i < ((F_CPU / 18000UL) * ms); i++)
      000026 1E 07            [ 2]  138 	ldw	x, (0x07, sp)
      000028 5C               [ 1]  139 	incw	x
      000029 1F 07            [ 2]  140 	ldw	(0x07, sp), x
      00002B 26 DA            [ 1]  141 	jrne	00103$
      00002D 1E 05            [ 2]  142 	ldw	x, (0x05, sp)
      00002F 5C               [ 1]  143 	incw	x
      000030 1F 05            [ 2]  144 	ldw	(0x05, sp), x
      000032 20 D3            [ 2]  145 	jra	00103$
      000034                        146 00105$:
                                    147 ;	main.c: 34: }
      000034 5B 08            [ 2]  148 	addw	sp, #8
      000036 81               [ 4]  149 	ret
                                    150 ;	main.c: 36: unsigned int clock(void)
                                    151 ;	-----------------------------------------
                                    152 ;	 function clock
                                    153 ;	-----------------------------------------
      000037                        154 _clock:
      000037 52 04            [ 2]  155 	sub	sp, #4
                                    156 ;	main.c: 38: unsigned char h = TIM1_CNTRH;
      000039 C6 52 5E         [ 1]  157 	ld	a, 0x525e
      00003C 95               [ 1]  158 	ld	xh, a
                                    159 ;	main.c: 39: unsigned char l = TIM1_CNTRL;
      00003D C6 52 5F         [ 1]  160 	ld	a, 0x525f
                                    161 ;	main.c: 40: return((unsigned int)(h) << 8 | l);
      000040 0F 04            [ 1]  162 	clr	(0x04, sp)
      000042 0F 01            [ 1]  163 	clr	(0x01, sp)
      000044 1A 04            [ 1]  164 	or	a, (0x04, sp)
      000046 02               [ 1]  165 	rlwa	x
      000047 1A 01            [ 1]  166 	or	a, (0x01, sp)
      000049 95               [ 1]  167 	ld	xh, a
                                    168 ;	main.c: 41: }
      00004A 5B 04            [ 2]  169 	addw	sp, #4
      00004C 81               [ 4]  170 	ret
                                    171 ;	main.c: 43: void init_clock(void) {
                                    172 ;	-----------------------------------------
                                    173 ;	 function init_clock
                                    174 ;	-----------------------------------------
      00004D                        175 _init_clock:
                                    176 ;	main.c: 44: CLK_CKDIVR = 0;//0x18; // Set the frequency to 2 MHz
      00004D 35 00 50 C6      [ 1]  177 	mov	0x50c6+0, #0x00
                                    178 ;	main.c: 45: CLK_PCKENR1 = 0x02; //SPI
      000051 35 02 50 C7      [ 1]  179 	mov	0x50c7+0, #0x02
                                    180 ;	main.c: 46: CLK_PCKENR2 = 0x73; //off
      000055 35 73 50 CA      [ 1]  181 	mov	0x50ca+0, #0x73
                                    182 ;	main.c: 48: }
      000059 81               [ 4]  183 	ret
                                    184 ;	main.c: 50: void drawscene(void) {
                                    185 ;	-----------------------------------------
                                    186 ;	 function drawscene
                                    187 ;	-----------------------------------------
      00005A                        188 _drawscene:
      00005A 52 11            [ 2]  189 	sub	sp, #17
                                    190 ;	main.c: 52: ST7735_SetAddrWindow(0, 0, 160, 80);
      00005C 4B 50            [ 1]  191 	push	#0x50
      00005E 4B A0            [ 1]  192 	push	#0xa0
      000060 4B 00            [ 1]  193 	push	#0x00
      000062 4B 00            [ 1]  194 	push	#0x00
      000064 CDr09r62         [ 4]  195 	call	_ST7735_SetAddrWindow
      000067 5B 04            [ 2]  196 	addw	sp, #4
                                    197 ;	main.c: 53: for (int i=0; i<480; ++i)
      000069 5F               [ 1]  198 	clrw	x
      00006A                        199 00137$:
      00006A A3 01 E0         [ 2]  200 	cpw	x, #0x01e0
      00006D 2E 0E            [ 1]  201 	jrsge	00101$
                                    202 ;	main.c: 54: ST7735_Write16(RGB(17,72,0));
      00006F 89               [ 2]  203 	pushw	x
      000070 4B 40            [ 1]  204 	push	#0x40
      000072 4B 12            [ 1]  205 	push	#0x12
      000074 CDr09r39         [ 4]  206 	call	_ST7735_Write16
      000077 5B 02            [ 2]  207 	addw	sp, #2
      000079 85               [ 2]  208 	popw	x
                                    209 ;	main.c: 53: for (int i=0; i<480; ++i)
      00007A 5C               [ 1]  210 	incw	x
      00007B 20 ED            [ 2]  211 	jra	00137$
      00007D                        212 00101$:
                                    213 ;	main.c: 57: for (int j=0; j<2; ++j) {
      00007D 5F               [ 1]  214 	clrw	x
      00007E 1F 10            [ 2]  215 	ldw	(0x10, sp), x
      000080                        216 00155$:
      000080 1E 10            [ 2]  217 	ldw	x, (0x10, sp)
      000082 A3 00 02         [ 2]  218 	cpw	x, #0x0002
      000085 2E 6B            [ 1]  219 	jrsge	00107$
                                    220 ;	main.c: 58: for (int i=0; i<48; ++i)
      000087 5F               [ 1]  221 	clrw	x
      000088                        222 00140$:
      000088 A3 00 30         [ 2]  223 	cpw	x, #0x0030
      00008B 2E 0E            [ 1]  224 	jrsge	00102$
                                    225 ;	main.c: 59: ST7735_Write16(RGB(17,72,0));
      00008D 89               [ 2]  226 	pushw	x
      00008E 4B 40            [ 1]  227 	push	#0x40
      000090 4B 12            [ 1]  228 	push	#0x12
      000092 CDr09r39         [ 4]  229 	call	_ST7735_Write16
      000095 5B 02            [ 2]  230 	addw	sp, #2
      000097 85               [ 2]  231 	popw	x
                                    232 ;	main.c: 58: for (int i=0; i<48; ++i)
      000098 5C               [ 1]  233 	incw	x
      000099 20 ED            [ 2]  234 	jra	00140$
      00009B                        235 00102$:
                                    236 ;	main.c: 60: for (int i=0; i<16;++i)
      00009B 5F               [ 1]  237 	clrw	x
      00009C                        238 00143$:
      00009C A3 00 10         [ 2]  239 	cpw	x, #0x0010
      00009F 2E 0E            [ 1]  240 	jrsge	00103$
                                    241 ;	main.c: 61: ST7735_Write16(RGB(95,144,47));
      0000A1 89               [ 2]  242 	pushw	x
      0000A2 4B 85            [ 1]  243 	push	#0x85
      0000A4 4B 5C            [ 1]  244 	push	#0x5c
      0000A6 CDr09r39         [ 4]  245 	call	_ST7735_Write16
      0000A9 5B 02            [ 2]  246 	addw	sp, #2
      0000AB 85               [ 2]  247 	popw	x
                                    248 ;	main.c: 60: for (int i=0; i<16;++i)
      0000AC 5C               [ 1]  249 	incw	x
      0000AD 20 ED            [ 2]  250 	jra	00143$
      0000AF                        251 00103$:
                                    252 ;	main.c: 62: for (int i=0; i<32; ++i)
      0000AF 5F               [ 1]  253 	clrw	x
      0000B0                        254 00146$:
      0000B0 A3 00 20         [ 2]  255 	cpw	x, #0x0020
      0000B3 2E 0E            [ 1]  256 	jrsge	00104$
                                    257 ;	main.c: 63: ST7735_Write16(RGB(17,72,0));
      0000B5 89               [ 2]  258 	pushw	x
      0000B6 4B 40            [ 1]  259 	push	#0x40
      0000B8 4B 12            [ 1]  260 	push	#0x12
      0000BA CDr09r39         [ 4]  261 	call	_ST7735_Write16
      0000BD 5B 02            [ 2]  262 	addw	sp, #2
      0000BF 85               [ 2]  263 	popw	x
                                    264 ;	main.c: 62: for (int i=0; i<32; ++i)
      0000C0 5C               [ 1]  265 	incw	x
      0000C1 20 ED            [ 2]  266 	jra	00146$
      0000C3                        267 00104$:
                                    268 ;	main.c: 64: for (int i=0; i<16;++i)
      0000C3 5F               [ 1]  269 	clrw	x
      0000C4                        270 00149$:
      0000C4 A3 00 10         [ 2]  271 	cpw	x, #0x0010
      0000C7 2E 0E            [ 1]  272 	jrsge	00105$
                                    273 ;	main.c: 65: ST7735_Write16(RGB(95,144,47));
      0000C9 89               [ 2]  274 	pushw	x
      0000CA 4B 85            [ 1]  275 	push	#0x85
      0000CC 4B 5C            [ 1]  276 	push	#0x5c
      0000CE CDr09r39         [ 4]  277 	call	_ST7735_Write16
      0000D1 5B 02            [ 2]  278 	addw	sp, #2
      0000D3 85               [ 2]  279 	popw	x
                                    280 ;	main.c: 64: for (int i=0; i<16;++i)
      0000D4 5C               [ 1]  281 	incw	x
      0000D5 20 ED            [ 2]  282 	jra	00149$
      0000D7                        283 00105$:
                                    284 ;	main.c: 66: for (int i=0; i<48; ++i)
      0000D7 5F               [ 1]  285 	clrw	x
      0000D8                        286 00152$:
      0000D8 A3 00 30         [ 2]  287 	cpw	x, #0x0030
      0000DB 2E 0E            [ 1]  288 	jrsge	00156$
                                    289 ;	main.c: 67: ST7735_Write16(RGB(17,72,0));
      0000DD 89               [ 2]  290 	pushw	x
      0000DE 4B 40            [ 1]  291 	push	#0x40
      0000E0 4B 12            [ 1]  292 	push	#0x12
      0000E2 CDr09r39         [ 4]  293 	call	_ST7735_Write16
      0000E5 5B 02            [ 2]  294 	addw	sp, #2
      0000E7 85               [ 2]  295 	popw	x
                                    296 ;	main.c: 66: for (int i=0; i<48; ++i)
      0000E8 5C               [ 1]  297 	incw	x
      0000E9 20 ED            [ 2]  298 	jra	00152$
      0000EB                        299 00156$:
                                    300 ;	main.c: 57: for (int j=0; j<2; ++j) {
      0000EB 1E 10            [ 2]  301 	ldw	x, (0x10, sp)
      0000ED 5C               [ 1]  302 	incw	x
      0000EE 1F 10            [ 2]  303 	ldw	(0x10, sp), x
      0000F0 20 8E            [ 2]  304 	jra	00155$
      0000F2                        305 00107$:
                                    306 ;	main.c: 69: for (int j=0; j<2; ++j) {
      0000F2 5F               [ 1]  307 	clrw	x
      0000F3 1F 0E            [ 2]  308 	ldw	(0x0e, sp), x
      0000F5                        309 00173$:
      0000F5 1E 0E            [ 2]  310 	ldw	x, (0x0e, sp)
      0000F7 A3 00 02         [ 2]  311 	cpw	x, #0x0002
      0000FA 2E 6B            [ 1]  312 	jrsge	00113$
                                    313 ;	main.c: 70: for (int i=0; i<32; ++i)
      0000FC 5F               [ 1]  314 	clrw	x
      0000FD                        315 00158$:
      0000FD A3 00 20         [ 2]  316 	cpw	x, #0x0020
      000100 2E 0E            [ 1]  317 	jrsge	00108$
                                    318 ;	main.c: 71: ST7735_Write16(RGB(17,72,0));
      000102 89               [ 2]  319 	pushw	x
      000103 4B 40            [ 1]  320 	push	#0x40
      000105 4B 12            [ 1]  321 	push	#0x12
      000107 CDr09r39         [ 4]  322 	call	_ST7735_Write16
      00010A 5B 02            [ 2]  323 	addw	sp, #2
      00010C 85               [ 2]  324 	popw	x
                                    325 ;	main.c: 70: for (int i=0; i<32; ++i)
      00010D 5C               [ 1]  326 	incw	x
      00010E 20 ED            [ 2]  327 	jra	00158$
      000110                        328 00108$:
                                    329 ;	main.c: 72: for (int i=0; i<40;++i)
      000110 5F               [ 1]  330 	clrw	x
      000111                        331 00161$:
      000111 A3 00 28         [ 2]  332 	cpw	x, #0x0028
      000114 2E 0E            [ 1]  333 	jrsge	00109$
                                    334 ;	main.c: 73: ST7735_Write16(RGB(95,144,47));
      000116 89               [ 2]  335 	pushw	x
      000117 4B 85            [ 1]  336 	push	#0x85
      000119 4B 5C            [ 1]  337 	push	#0x5c
      00011B CDr09r39         [ 4]  338 	call	_ST7735_Write16
      00011E 5B 02            [ 2]  339 	addw	sp, #2
      000120 85               [ 2]  340 	popw	x
                                    341 ;	main.c: 72: for (int i=0; i<40;++i)
      000121 5C               [ 1]  342 	incw	x
      000122 20 ED            [ 2]  343 	jra	00161$
      000124                        344 00109$:
                                    345 ;	main.c: 74: for (int i=0; i<16; ++i)
      000124 5F               [ 1]  346 	clrw	x
      000125                        347 00164$:
      000125 A3 00 10         [ 2]  348 	cpw	x, #0x0010
      000128 2E 0E            [ 1]  349 	jrsge	00110$
                                    350 ;	main.c: 75: ST7735_Write16(RGB(17,72,0));
      00012A 89               [ 2]  351 	pushw	x
      00012B 4B 40            [ 1]  352 	push	#0x40
      00012D 4B 12            [ 1]  353 	push	#0x12
      00012F CDr09r39         [ 4]  354 	call	_ST7735_Write16
      000132 5B 02            [ 2]  355 	addw	sp, #2
      000134 85               [ 2]  356 	popw	x
                                    357 ;	main.c: 74: for (int i=0; i<16; ++i)
      000135 5C               [ 1]  358 	incw	x
      000136 20 ED            [ 2]  359 	jra	00164$
      000138                        360 00110$:
                                    361 ;	main.c: 76: for (int i=0; i<40;++i)
      000138 5F               [ 1]  362 	clrw	x
      000139                        363 00167$:
      000139 A3 00 28         [ 2]  364 	cpw	x, #0x0028
      00013C 2E 0E            [ 1]  365 	jrsge	00111$
                                    366 ;	main.c: 77: ST7735_Write16(RGB(95,144,47));
      00013E 89               [ 2]  367 	pushw	x
      00013F 4B 85            [ 1]  368 	push	#0x85
      000141 4B 5C            [ 1]  369 	push	#0x5c
      000143 CDr09r39         [ 4]  370 	call	_ST7735_Write16
      000146 5B 02            [ 2]  371 	addw	sp, #2
      000148 85               [ 2]  372 	popw	x
                                    373 ;	main.c: 76: for (int i=0; i<40;++i)
      000149 5C               [ 1]  374 	incw	x
      00014A 20 ED            [ 2]  375 	jra	00167$
      00014C                        376 00111$:
                                    377 ;	main.c: 78: for (int i=0; i<32; ++i)
      00014C 5F               [ 1]  378 	clrw	x
      00014D                        379 00170$:
      00014D A3 00 20         [ 2]  380 	cpw	x, #0x0020
      000150 2E 0E            [ 1]  381 	jrsge	00174$
                                    382 ;	main.c: 79: ST7735_Write16(RGB(17,72,0));
      000152 89               [ 2]  383 	pushw	x
      000153 4B 40            [ 1]  384 	push	#0x40
      000155 4B 12            [ 1]  385 	push	#0x12
      000157 CDr09r39         [ 4]  386 	call	_ST7735_Write16
      00015A 5B 02            [ 2]  387 	addw	sp, #2
      00015C 85               [ 2]  388 	popw	x
                                    389 ;	main.c: 78: for (int i=0; i<32; ++i)
      00015D 5C               [ 1]  390 	incw	x
      00015E 20 ED            [ 2]  391 	jra	00170$
      000160                        392 00174$:
                                    393 ;	main.c: 69: for (int j=0; j<2; ++j) {
      000160 1E 0E            [ 2]  394 	ldw	x, (0x0e, sp)
      000162 5C               [ 1]  395 	incw	x
      000163 1F 0E            [ 2]  396 	ldw	(0x0e, sp), x
      000165 20 8E            [ 2]  397 	jra	00173$
      000167                        398 00113$:
                                    399 ;	main.c: 82: for (int j=0; j<2; ++j){
      000167 5F               [ 1]  400 	clrw	x
      000168 1F 0C            [ 2]  401 	ldw	(0x0c, sp), x
      00016A                        402 00203$:
      00016A 1E 0C            [ 2]  403 	ldw	x, (0x0c, sp)
      00016C A3 00 02         [ 2]  404 	cpw	x, #0x0002
      00016F 2F 03            [ 1]  405 	jrslt	00657$
      000171 CCr02r48         [ 2]  406 	jp	00123$
      000174                        407 00657$:
                                    408 ;	main.c: 83: for (int i=0; i<8; ++i)
      000174 5F               [ 1]  409 	clrw	x
      000175                        410 00176$:
      000175 A3 00 08         [ 2]  411 	cpw	x, #0x0008
      000178 2E 0E            [ 1]  412 	jrsge	00114$
                                    413 ;	main.c: 84: ST7735_Write16(RGB(17,72,0));
      00017A 89               [ 2]  414 	pushw	x
      00017B 4B 40            [ 1]  415 	push	#0x40
      00017D 4B 12            [ 1]  416 	push	#0x12
      00017F CDr09r39         [ 4]  417 	call	_ST7735_Write16
      000182 5B 02            [ 2]  418 	addw	sp, #2
      000184 85               [ 2]  419 	popw	x
                                    420 ;	main.c: 83: for (int i=0; i<8; ++i)
      000185 5C               [ 1]  421 	incw	x
      000186 20 ED            [ 2]  422 	jra	00176$
      000188                        423 00114$:
                                    424 ;	main.c: 85: for (int i=0; i<16; ++i)
      000188 5F               [ 1]  425 	clrw	x
      000189                        426 00179$:
      000189 A3 00 10         [ 2]  427 	cpw	x, #0x0010
      00018C 2E 0E            [ 1]  428 	jrsge	00115$
                                    429 ;	main.c: 86: ST7735_Write16(RGB(17,72,0));
      00018E 89               [ 2]  430 	pushw	x
      00018F 4B 40            [ 1]  431 	push	#0x40
      000191 4B 12            [ 1]  432 	push	#0x12
      000193 CDr09r39         [ 4]  433 	call	_ST7735_Write16
      000196 5B 02            [ 2]  434 	addw	sp, #2
      000198 85               [ 2]  435 	popw	x
                                    436 ;	main.c: 85: for (int i=0; i<16; ++i)
      000199 5C               [ 1]  437 	incw	x
      00019A 20 ED            [ 2]  438 	jra	00179$
      00019C                        439 00115$:
                                    440 ;	main.c: 87: for (int i=0; i<2;++i)
      00019C 5F               [ 1]  441 	clrw	x
      00019D                        442 00182$:
      00019D A3 00 02         [ 2]  443 	cpw	x, #0x0002
      0001A0 2E 0E            [ 1]  444 	jrsge	00116$
                                    445 ;	main.c: 88: ST7735_Write16(RGB(8,27,0));
      0001A2 89               [ 2]  446 	pushw	x
      0001A3 4B C0            [ 1]  447 	push	#0xc0
      0001A5 4B 08            [ 1]  448 	push	#0x08
      0001A7 CDr09r39         [ 4]  449 	call	_ST7735_Write16
      0001AA 5B 02            [ 2]  450 	addw	sp, #2
      0001AC 85               [ 2]  451 	popw	x
                                    452 ;	main.c: 87: for (int i=0; i<2;++i)
      0001AD 5C               [ 1]  453 	incw	x
      0001AE 20 ED            [ 2]  454 	jra	00182$
      0001B0                        455 00116$:
                                    456 ;	main.c: 89: for (int i=0; i<2;++i)
      0001B0 5F               [ 1]  457 	clrw	x
      0001B1                        458 00185$:
      0001B1 A3 00 02         [ 2]  459 	cpw	x, #0x0002
      0001B4 2E 1A            [ 1]  460 	jrsge	00117$
                                    461 ;	main.c: 90: ST7735_Write16(j?RGB(95,144,47):RGB(8,27,0));
      0001B6 16 0C            [ 2]  462 	ldw	y, (0x0c, sp)
      0001B8 27 06            [ 1]  463 	jreq	00243$
      0001BA 90 AE 5C 85      [ 2]  464 	ldw	y, #0x5c85
      0001BE 20 04            [ 2]  465 	jra	00244$
      0001C0                        466 00243$:
      0001C0 90 AE 08 C0      [ 2]  467 	ldw	y, #0x08c0
      0001C4                        468 00244$:
      0001C4 89               [ 2]  469 	pushw	x
      0001C5 90 89            [ 2]  470 	pushw	y
      0001C7 CDr09r39         [ 4]  471 	call	_ST7735_Write16
      0001CA 5B 02            [ 2]  472 	addw	sp, #2
      0001CC 85               [ 2]  473 	popw	x
                                    474 ;	main.c: 89: for (int i=0; i<2;++i)
      0001CD 5C               [ 1]  475 	incw	x
      0001CE 20 E1            [ 2]  476 	jra	00185$
      0001D0                        477 00117$:
                                    478 ;	main.c: 91: for (int i=0; i<104;++i)
      0001D0 5F               [ 1]  479 	clrw	x
      0001D1                        480 00188$:
      0001D1 A3 00 68         [ 2]  481 	cpw	x, #0x0068
      0001D4 2E 0E            [ 1]  482 	jrsge	00118$
                                    483 ;	main.c: 92: ST7735_Write16(RGB(95,144,47));
      0001D6 89               [ 2]  484 	pushw	x
      0001D7 4B 85            [ 1]  485 	push	#0x85
      0001D9 4B 5C            [ 1]  486 	push	#0x5c
      0001DB CDr09r39         [ 4]  487 	call	_ST7735_Write16
      0001DE 5B 02            [ 2]  488 	addw	sp, #2
      0001E0 85               [ 2]  489 	popw	x
                                    490 ;	main.c: 91: for (int i=0; i<104;++i)
      0001E1 5C               [ 1]  491 	incw	x
      0001E2 20 ED            [ 2]  492 	jra	00188$
      0001E4                        493 00118$:
                                    494 ;	main.c: 93: for (int i=0; i<2;++i)
      0001E4 5F               [ 1]  495 	clrw	x
      0001E5                        496 00191$:
      0001E5 A3 00 02         [ 2]  497 	cpw	x, #0x0002
      0001E8 2E 1A            [ 1]  498 	jrsge	00119$
                                    499 ;	main.c: 94: ST7735_Write16(j?RGB(95,144,47):RGB(8,27,0));
      0001EA 16 0C            [ 2]  500 	ldw	y, (0x0c, sp)
      0001EC 27 06            [ 1]  501 	jreq	00245$
      0001EE 90 AE 5C 85      [ 2]  502 	ldw	y, #0x5c85
      0001F2 20 04            [ 2]  503 	jra	00246$
      0001F4                        504 00245$:
      0001F4 90 AE 08 C0      [ 2]  505 	ldw	y, #0x08c0
      0001F8                        506 00246$:
      0001F8 89               [ 2]  507 	pushw	x
      0001F9 90 89            [ 2]  508 	pushw	y
      0001FB CDr09r39         [ 4]  509 	call	_ST7735_Write16
      0001FE 5B 02            [ 2]  510 	addw	sp, #2
      000200 85               [ 2]  511 	popw	x
                                    512 ;	main.c: 93: for (int i=0; i<2;++i)
      000201 5C               [ 1]  513 	incw	x
      000202 20 E1            [ 2]  514 	jra	00191$
      000204                        515 00119$:
                                    516 ;	main.c: 95: for (int i=0; i<2;++i)
      000204 5F               [ 1]  517 	clrw	x
      000205                        518 00194$:
      000205 A3 00 02         [ 2]  519 	cpw	x, #0x0002
      000208 2E 0E            [ 1]  520 	jrsge	00120$
                                    521 ;	main.c: 96: ST7735_Write16(RGB(8,27,0));
      00020A 89               [ 2]  522 	pushw	x
      00020B 4B C0            [ 1]  523 	push	#0xc0
      00020D 4B 08            [ 1]  524 	push	#0x08
      00020F CDr09r39         [ 4]  525 	call	_ST7735_Write16
      000212 5B 02            [ 2]  526 	addw	sp, #2
      000214 85               [ 2]  527 	popw	x
                                    528 ;	main.c: 95: for (int i=0; i<2;++i)
      000215 5C               [ 1]  529 	incw	x
      000216 20 ED            [ 2]  530 	jra	00194$
      000218                        531 00120$:
                                    532 ;	main.c: 97: for (int i=0; i<16; ++i)
      000218 5F               [ 1]  533 	clrw	x
      000219                        534 00197$:
      000219 A3 00 10         [ 2]  535 	cpw	x, #0x0010
      00021C 2E 0E            [ 1]  536 	jrsge	00121$
                                    537 ;	main.c: 98: ST7735_Write16(RGB(17,72,0));
      00021E 89               [ 2]  538 	pushw	x
      00021F 4B 40            [ 1]  539 	push	#0x40
      000221 4B 12            [ 1]  540 	push	#0x12
      000223 CDr09r39         [ 4]  541 	call	_ST7735_Write16
      000226 5B 02            [ 2]  542 	addw	sp, #2
      000228 85               [ 2]  543 	popw	x
                                    544 ;	main.c: 97: for (int i=0; i<16; ++i)
      000229 5C               [ 1]  545 	incw	x
      00022A 20 ED            [ 2]  546 	jra	00197$
      00022C                        547 00121$:
                                    548 ;	main.c: 99: for (int i=0; i<8; ++i)
      00022C 5F               [ 1]  549 	clrw	x
      00022D                        550 00200$:
      00022D A3 00 08         [ 2]  551 	cpw	x, #0x0008
      000230 2E 0E            [ 1]  552 	jrsge	00204$
                                    553 ;	main.c: 100: ST7735_Write16(RGB(17,72,0));
      000232 89               [ 2]  554 	pushw	x
      000233 4B 40            [ 1]  555 	push	#0x40
      000235 4B 12            [ 1]  556 	push	#0x12
      000237 CDr09r39         [ 4]  557 	call	_ST7735_Write16
      00023A 5B 02            [ 2]  558 	addw	sp, #2
      00023C 85               [ 2]  559 	popw	x
                                    560 ;	main.c: 99: for (int i=0; i<8; ++i)
      00023D 5C               [ 1]  561 	incw	x
      00023E 20 ED            [ 2]  562 	jra	00200$
      000240                        563 00204$:
                                    564 ;	main.c: 82: for (int j=0; j<2; ++j){
      000240 1E 0C            [ 2]  565 	ldw	x, (0x0c, sp)
      000242 5C               [ 1]  566 	incw	x
      000243 1F 0C            [ 2]  567 	ldw	(0x0c, sp), x
      000245 CCr01r6A         [ 2]  568 	jp	00203$
      000248                        569 00123$:
                                    570 ;	main.c: 103: for (int j=0; j<52; ++j) {
      000248 5F               [ 1]  571 	clrw	x
      000249 1F 0A            [ 2]  572 	ldw	(0x0a, sp), x
      00024B                        573 00221$:
      00024B 1E 0A            [ 2]  574 	ldw	x, (0x0a, sp)
      00024D A3 00 34         [ 2]  575 	cpw	x, #0x0034
      000250 2E 6B            [ 1]  576 	jrsge	00129$
                                    577 ;	main.c: 104: for (int i=0; i<16;++i)
      000252 5F               [ 1]  578 	clrw	x
      000253                        579 00206$:
      000253 A3 00 10         [ 2]  580 	cpw	x, #0x0010
      000256 2E 0E            [ 1]  581 	jrsge	00124$
                                    582 ;	main.c: 105: ST7735_Write16(RGB(95,144,47));
      000258 89               [ 2]  583 	pushw	x
      000259 4B 85            [ 1]  584 	push	#0x85
      00025B 4B 5C            [ 1]  585 	push	#0x5c
      00025D CDr09r39         [ 4]  586 	call	_ST7735_Write16
      000260 5B 02            [ 2]  587 	addw	sp, #2
      000262 85               [ 2]  588 	popw	x
                                    589 ;	main.c: 104: for (int i=0; i<16;++i)
      000263 5C               [ 1]  590 	incw	x
      000264 20 ED            [ 2]  591 	jra	00206$
      000266                        592 00124$:
                                    593 ;	main.c: 106: for (int i=0; i<8;++i)
      000266 5F               [ 1]  594 	clrw	x
      000267                        595 00209$:
      000267 A3 00 08         [ 2]  596 	cpw	x, #0x0008
      00026A 2E 0E            [ 1]  597 	jrsge	00125$
                                    598 ;	main.c: 107: ST7735_Write16(RGB(8,27,0));
      00026C 89               [ 2]  599 	pushw	x
      00026D 4B C0            [ 1]  600 	push	#0xc0
      00026F 4B 08            [ 1]  601 	push	#0x08
      000271 CDr09r39         [ 4]  602 	call	_ST7735_Write16
      000274 5B 02            [ 2]  603 	addw	sp, #2
      000276 85               [ 2]  604 	popw	x
                                    605 ;	main.c: 106: for (int i=0; i<8;++i)
      000277 5C               [ 1]  606 	incw	x
      000278 20 ED            [ 2]  607 	jra	00209$
      00027A                        608 00125$:
                                    609 ;	main.c: 108: for (int i=0; i<112;++i)
      00027A 5F               [ 1]  610 	clrw	x
      00027B                        611 00212$:
      00027B A3 00 70         [ 2]  612 	cpw	x, #0x0070
      00027E 2E 0E            [ 1]  613 	jrsge	00126$
                                    614 ;	main.c: 109: ST7735_Write16(RGB(95,144,47));
      000280 89               [ 2]  615 	pushw	x
      000281 4B 85            [ 1]  616 	push	#0x85
      000283 4B 5C            [ 1]  617 	push	#0x5c
      000285 CDr09r39         [ 4]  618 	call	_ST7735_Write16
      000288 5B 02            [ 2]  619 	addw	sp, #2
      00028A 85               [ 2]  620 	popw	x
                                    621 ;	main.c: 108: for (int i=0; i<112;++i)
      00028B 5C               [ 1]  622 	incw	x
      00028C 20 ED            [ 2]  623 	jra	00212$
      00028E                        624 00126$:
                                    625 ;	main.c: 110: for (int i=0; i<8;++i)
      00028E 5F               [ 1]  626 	clrw	x
      00028F                        627 00215$:
      00028F A3 00 08         [ 2]  628 	cpw	x, #0x0008
      000292 2E 0E            [ 1]  629 	jrsge	00127$
                                    630 ;	main.c: 111: ST7735_Write16(RGB(8,27,0));
      000294 89               [ 2]  631 	pushw	x
      000295 4B C0            [ 1]  632 	push	#0xc0
      000297 4B 08            [ 1]  633 	push	#0x08
      000299 CDr09r39         [ 4]  634 	call	_ST7735_Write16
      00029C 5B 02            [ 2]  635 	addw	sp, #2
      00029E 85               [ 2]  636 	popw	x
                                    637 ;	main.c: 110: for (int i=0; i<8;++i)
      00029F 5C               [ 1]  638 	incw	x
      0002A0 20 ED            [ 2]  639 	jra	00215$
      0002A2                        640 00127$:
                                    641 ;	main.c: 112: for (int i=0; i<16;++i)
      0002A2 5F               [ 1]  642 	clrw	x
      0002A3                        643 00218$:
      0002A3 A3 00 10         [ 2]  644 	cpw	x, #0x0010
      0002A6 2E 0E            [ 1]  645 	jrsge	00222$
                                    646 ;	main.c: 113: ST7735_Write16(RGB(95,144,47));
      0002A8 89               [ 2]  647 	pushw	x
      0002A9 4B 85            [ 1]  648 	push	#0x85
      0002AB 4B 5C            [ 1]  649 	push	#0x5c
      0002AD CDr09r39         [ 4]  650 	call	_ST7735_Write16
      0002B0 5B 02            [ 2]  651 	addw	sp, #2
      0002B2 85               [ 2]  652 	popw	x
                                    653 ;	main.c: 112: for (int i=0; i<16;++i)
      0002B3 5C               [ 1]  654 	incw	x
      0002B4 20 ED            [ 2]  655 	jra	00218$
      0002B6                        656 00222$:
                                    657 ;	main.c: 103: for (int j=0; j<52; ++j) {
      0002B6 1E 0A            [ 2]  658 	ldw	x, (0x0a, sp)
      0002B8 5C               [ 1]  659 	incw	x
      0002B9 1F 0A            [ 2]  660 	ldw	(0x0a, sp), x
      0002BB 20 8E            [ 2]  661 	jra	00221$
      0002BD                        662 00129$:
                                    663 ;	main.c: 116: for (int j=0; j<16; ++j) {
      0002BD 5F               [ 1]  664 	clrw	x
      0002BE 1F 08            [ 2]  665 	ldw	(0x08, sp), x
      0002C0                        666 00233$:
      0002C0 1E 08            [ 2]  667 	ldw	x, (0x08, sp)
      0002C2 A3 00 10         [ 2]  668 	cpw	x, #0x0010
      0002C5 2E 64            [ 1]  669 	jrsge	00133$
                                    670 ;	main.c: 117: uint8_t r = pool[j];
      0002C7 1E 08            [ 2]  671 	ldw	x, (0x08, sp)
      0002C9 1Cr01r06         [ 2]  672 	addw	x, #_pool
      0002CC F6               [ 1]  673 	ld	a, (x)
                                    674 ;	main.c: 118: uint8_t t = 80-r/2;
      0002CD 6B 04            [ 1]  675 	ld	(0x04, sp), a
      0002CF 0F 03            [ 1]  676 	clr	(0x03, sp)
      0002D1 4B 02            [ 1]  677 	push	#0x02
      0002D3 4B 00            [ 1]  678 	push	#0x00
      0002D5 1E 05            [ 2]  679 	ldw	x, (0x05, sp)
      0002D7 89               [ 2]  680 	pushw	x
      0002D8 CDr00r00         [ 4]  681 	call	__divsint
      0002DB 5B 04            [ 2]  682 	addw	sp, #4
      0002DD A6 50            [ 1]  683 	ld	a, #0x50
      0002DF 89               [ 2]  684 	pushw	x
      0002E0 10 02            [ 1]  685 	sub	a, (#2, sp)
      0002E2 85               [ 2]  686 	popw	x
      0002E3 6B 07            [ 1]  687 	ld	(0x07, sp), a
                                    688 ;	main.c: 119: for (int i=0; i<t; ++i)
      0002E5 5F               [ 1]  689 	clrw	x
      0002E6                        690 00224$:
      0002E6 7B 07            [ 1]  691 	ld	a, (0x07, sp)
      0002E8 6B 02            [ 1]  692 	ld	(0x02, sp), a
      0002EA 0F 01            [ 1]  693 	clr	(0x01, sp)
      0002EC 13 01            [ 2]  694 	cpw	x, (0x01, sp)
      0002EE 2E 0E            [ 1]  695 	jrsge	00130$
                                    696 ;	main.c: 120: ST7735_Write16(RGB(159,174,29));
      0002F0 89               [ 2]  697 	pushw	x
      0002F1 4B 63            [ 1]  698 	push	#0x63
      0002F3 4B 9D            [ 1]  699 	push	#0x9d
      0002F5 CDr09r39         [ 4]  700 	call	_ST7735_Write16
      0002F8 5B 02            [ 2]  701 	addw	sp, #2
      0002FA 85               [ 2]  702 	popw	x
                                    703 ;	main.c: 119: for (int i=0; i<t; ++i)
      0002FB 5C               [ 1]  704 	incw	x
      0002FC 20 E8            [ 2]  705 	jra	00224$
      0002FE                        706 00130$:
                                    707 ;	main.c: 121: for (int i=0; i<r; ++i)
      0002FE 5F               [ 1]  708 	clrw	x
      0002FF                        709 00227$:
      0002FF 13 03            [ 2]  710 	cpw	x, (0x03, sp)
      000301 2E 0E            [ 1]  711 	jrsge	00131$
                                    712 ;	main.c: 122: ST7735_Write16(RGB(27,98,139));
      000303 89               [ 2]  713 	pushw	x
      000304 4B 11            [ 1]  714 	push	#0x11
      000306 4B 1B            [ 1]  715 	push	#0x1b
      000308 CDr09r39         [ 4]  716 	call	_ST7735_Write16
      00030B 5B 02            [ 2]  717 	addw	sp, #2
      00030D 85               [ 2]  718 	popw	x
                                    719 ;	main.c: 121: for (int i=0; i<r; ++i)
      00030E 5C               [ 1]  720 	incw	x
      00030F 20 EE            [ 2]  721 	jra	00227$
      000311                        722 00131$:
                                    723 ;	main.c: 123: for (int i=0; i<t; ++i)
      000311 5F               [ 1]  724 	clrw	x
      000312                        725 00230$:
      000312 13 01            [ 2]  726 	cpw	x, (0x01, sp)
      000314 2E 0E            [ 1]  727 	jrsge	00234$
                                    728 ;	main.c: 124: ST7735_Write16(RGB(159,174,29));
      000316 89               [ 2]  729 	pushw	x
      000317 4B 63            [ 1]  730 	push	#0x63
      000319 4B 9D            [ 1]  731 	push	#0x9d
      00031B CDr09r39         [ 4]  732 	call	_ST7735_Write16
      00031E 5B 02            [ 2]  733 	addw	sp, #2
      000320 85               [ 2]  734 	popw	x
                                    735 ;	main.c: 123: for (int i=0; i<t; ++i)
      000321 5C               [ 1]  736 	incw	x
      000322 20 EE            [ 2]  737 	jra	00230$
      000324                        738 00234$:
                                    739 ;	main.c: 116: for (int j=0; j<16; ++j) {
      000324 1E 08            [ 2]  740 	ldw	x, (0x08, sp)
      000326 5C               [ 1]  741 	incw	x
      000327 1F 08            [ 2]  742 	ldw	(0x08, sp), x
      000329 20 95            [ 2]  743 	jra	00233$
      00032B                        744 00133$:
                                    745 ;	main.c: 126: for (int j=0; j<3; ++j) 
      00032B 5F               [ 1]  746 	clrw	x
      00032C 1F 05            [ 2]  747 	ldw	(0x05, sp), x
      00032E                        748 00239$:
      00032E 1E 05            [ 2]  749 	ldw	x, (0x05, sp)
      000330 A3 00 03         [ 2]  750 	cpw	x, #0x0003
      000333 2E 1B            [ 1]  751 	jrsge	00241$
                                    752 ;	main.c: 127: for (int i=0; i<160; ++i)
      000335 5F               [ 1]  753 	clrw	x
      000336                        754 00236$:
      000336 A3 00 A0         [ 2]  755 	cpw	x, #0x00a0
      000339 2E 0E            [ 1]  756 	jrsge	00240$
                                    757 ;	main.c: 128: ST7735_Write16(RGB(88,104,0)); 
      00033B 89               [ 2]  758 	pushw	x
      00033C 4B 40            [ 1]  759 	push	#0x40
      00033E 4B 5B            [ 1]  760 	push	#0x5b
      000340 CDr09r39         [ 4]  761 	call	_ST7735_Write16
      000343 5B 02            [ 2]  762 	addw	sp, #2
      000345 85               [ 2]  763 	popw	x
                                    764 ;	main.c: 127: for (int i=0; i<160; ++i)
      000346 5C               [ 1]  765 	incw	x
      000347 20 ED            [ 2]  766 	jra	00236$
      000349                        767 00240$:
                                    768 ;	main.c: 126: for (int j=0; j<3; ++j) 
      000349 1E 05            [ 2]  769 	ldw	x, (0x05, sp)
      00034B 5C               [ 1]  770 	incw	x
      00034C 1F 05            [ 2]  771 	ldw	(0x05, sp), x
      00034E 20 DE            [ 2]  772 	jra	00239$
      000350                        773 00241$:
                                    774 ;	main.c: 129: }
      000350 5B 11            [ 2]  775 	addw	sp, #17
      000352 81               [ 4]  776 	ret
                                    777 ;	main.c: 131: void drawHarry(int x, int y) {
                                    778 ;	-----------------------------------------
                                    779 ;	 function drawHarry
                                    780 ;	-----------------------------------------
      000353                        781 _drawHarry:
      000353 52 07            [ 2]  782 	sub	sp, #7
                                    783 ;	main.c: 132: for (int j=0; j<15; ++j)
      000355 5F               [ 1]  784 	clrw	x
      000356 1F 01            [ 2]  785 	ldw	(0x01, sp), x
      000358                        786 00109$:
      000358 1E 01            [ 2]  787 	ldw	x, (0x01, sp)
      00035A A3 00 0F         [ 2]  788 	cpw	x, #0x000f
      00035D 2E 56            [ 1]  789 	jrsge	00111$
                                    790 ;	main.c: 133: for (int i=0; i<8; ++i) 
      00035F 1E 0C            [ 2]  791 	ldw	x, (0x0c, sp)
      000361 72 FB 01         [ 2]  792 	addw	x, (0x01, sp)
      000364 1F 05            [ 2]  793 	ldw	(0x05, sp), x
      000366 5F               [ 1]  794 	clrw	x
      000367 1F 03            [ 2]  795 	ldw	(0x03, sp), x
      000369                        796 00106$:
      000369 1E 03            [ 2]  797 	ldw	x, (0x03, sp)
      00036B A3 00 08         [ 2]  798 	cpw	x, #0x0008
      00036E 2E 3E            [ 1]  799 	jrsge	00110$
                                    800 ;	main.c: 135: uint8_t d = harry_raw[j*8 + i];
      000370 7B 02            [ 1]  801 	ld	a, (0x02, sp)
      000372 48               [ 1]  802 	sll	a
      000373 48               [ 1]  803 	sll	a
      000374 48               [ 1]  804 	sll	a
      000375 6B 07            [ 1]  805 	ld	(0x07, sp), a
      000377 7B 04            [ 1]  806 	ld	a, (0x04, sp)
      000379 1B 07            [ 1]  807 	add	a, (0x07, sp)
      00037B 97               [ 1]  808 	ld	xl, a
      00037C 49               [ 1]  809 	rlc	a
      00037D 4F               [ 1]  810 	clr	a
      00037E A2 00            [ 1]  811 	sbc	a, #0x00
      000380 95               [ 1]  812 	ld	xh, a
      000381 1Cr00r0E         [ 2]  813 	addw	x, #_harry_raw
      000384 F6               [ 1]  814 	ld	a, (x)
                                    815 ;	main.c: 136: uint8_t b1 = HIGH_NIB(d);
      000385 4E               [ 1]  816 	swap	a
      000386 A4 0F            [ 1]  817 	and	a, #0x0f
      000388 A4 0F            [ 1]  818 	and	a, #0x0f
                                    819 ;	main.c: 138: if (b1 != 2)
      00038A A1 02            [ 1]  820 	cp	a, #0x02
      00038C 27 19            [ 1]  821 	jreq	00107$
                                    822 ;	main.c: 139: ST7735_DrawPixel(x+i*2,y+j, pallet[b1]);
      00038E 5F               [ 1]  823 	clrw	x
      00038F 97               [ 1]  824 	ld	xl, a
      000390 58               [ 2]  825 	sllw	x
      000391 1Cr00r00         [ 2]  826 	addw	x, #_pallet
      000394 FE               [ 2]  827 	ldw	x, (x)
      000395 16 03            [ 2]  828 	ldw	y, (0x03, sp)
      000397 90 58            [ 2]  829 	sllw	y
      000399 72 F9 0A         [ 2]  830 	addw	y, (0x0a, sp)
      00039C 89               [ 2]  831 	pushw	x
      00039D 1E 07            [ 2]  832 	ldw	x, (0x07, sp)
      00039F 89               [ 2]  833 	pushw	x
      0003A0 90 89            [ 2]  834 	pushw	y
      0003A2 CDr09rE8         [ 4]  835 	call	_ST7735_DrawPixel
      0003A5 5B 06            [ 2]  836 	addw	sp, #6
      0003A7                        837 00107$:
                                    838 ;	main.c: 133: for (int i=0; i<8; ++i) 
      0003A7 1E 03            [ 2]  839 	ldw	x, (0x03, sp)
      0003A9 5C               [ 1]  840 	incw	x
      0003AA 1F 03            [ 2]  841 	ldw	(0x03, sp), x
      0003AC 20 BB            [ 2]  842 	jra	00106$
      0003AE                        843 00110$:
                                    844 ;	main.c: 132: for (int j=0; j<15; ++j)
      0003AE 1E 01            [ 2]  845 	ldw	x, (0x01, sp)
      0003B0 5C               [ 1]  846 	incw	x
      0003B1 1F 01            [ 2]  847 	ldw	(0x01, sp), x
      0003B3 20 A3            [ 2]  848 	jra	00109$
      0003B5                        849 00111$:
                                    850 ;	main.c: 143: }
      0003B5 5B 07            [ 2]  851 	addw	sp, #7
      0003B7 81               [ 4]  852 	ret
                                    853 ;	main.c: 145: void clearHarry(int x, int y) {
                                    854 ;	-----------------------------------------
                                    855 ;	 function clearHarry
                                    856 ;	-----------------------------------------
      0003B8                        857 _clearHarry:
      0003B8 52 0A            [ 2]  858 	sub	sp, #10
                                    859 ;	main.c: 146: for (int j=0; j<15; ++j)
      0003BA 5F               [ 1]  860 	clrw	x
      0003BB 1F 09            [ 2]  861 	ldw	(0x09, sp), x
      0003BD                        862 00112$:
      0003BD 1E 09            [ 2]  863 	ldw	x, (0x09, sp)
      0003BF A3 00 0F         [ 2]  864 	cpw	x, #0x000f
      0003C2 2E 6A            [ 1]  865 	jrsge	00114$
                                    866 ;	main.c: 147: for (int i=0; i<8; ++i) 
      0003C4 1E 0F            [ 2]  867 	ldw	x, (0x0f, sp)
      0003C6 72 FB 09         [ 2]  868 	addw	x, (0x09, sp)
      0003C9 1F 01            [ 2]  869 	ldw	(0x01, sp), x
      0003CB 5F               [ 1]  870 	clrw	x
      0003CC 1F 03            [ 2]  871 	ldw	(0x03, sp), x
      0003CE                        872 00109$:
      0003CE 1E 03            [ 2]  873 	ldw	x, (0x03, sp)
      0003D0 A3 00 08         [ 2]  874 	cpw	x, #0x0008
      0003D3 2E 52            [ 1]  875 	jrsge	00113$
                                    876 ;	main.c: 149: uint8_t d = harry_raw[j*8 + i];
      0003D5 7B 0A            [ 1]  877 	ld	a, (0x0a, sp)
      0003D7 48               [ 1]  878 	sll	a
      0003D8 48               [ 1]  879 	sll	a
      0003D9 48               [ 1]  880 	sll	a
      0003DA 97               [ 1]  881 	ld	xl, a
      0003DB 7B 04            [ 1]  882 	ld	a, (0x04, sp)
      0003DD 6B 08            [ 1]  883 	ld	(0x08, sp), a
      0003DF 72 FB 07         [ 2]  884 	addw	x, (7, sp)
      0003E2 9F               [ 1]  885 	ld	a, xl
      0003E3 49               [ 1]  886 	rlc	a
      0003E4 4F               [ 1]  887 	clr	a
      0003E5 A2 00            [ 1]  888 	sbc	a, #0x00
      0003E7 95               [ 1]  889 	ld	xh, a
      0003E8 1Cr00r0E         [ 2]  890 	addw	x, #_harry_raw
      0003EB F6               [ 1]  891 	ld	a, (x)
                                    892 ;	main.c: 150: uint8_t b1 = HIGH_NIB(d);
      0003EC 4E               [ 1]  893 	swap	a
      0003ED A4 0F            [ 1]  894 	and	a, #0x0f
      0003EF A4 0F            [ 1]  895 	and	a, #0x0f
                                    896 ;	main.c: 152: uint16_t c = RGB(95,144,47);
      0003F1 AE 5C 85         [ 2]  897 	ldw	x, #0x5c85
      0003F4 1F 05            [ 2]  898 	ldw	(0x05, sp), x
                                    899 ;	main.c: 153: if (b1 != 2) {
      0003F6 A1 02            [ 1]  900 	cp	a, #0x02
      0003F8 27 26            [ 1]  901 	jreq	00110$
                                    902 ;	main.c: 154: uint8_t cx = (x+2*i);
      0003FA 7B 0E            [ 1]  903 	ld	a, (0x0e, sp)
      0003FC 6B 07            [ 1]  904 	ld	(0x07, sp), a
      0003FE 7B 08            [ 1]  905 	ld	a, (0x08, sp)
      000400 48               [ 1]  906 	sll	a
      000401 1B 07            [ 1]  907 	add	a, (0x07, sp)
                                    908 ;	main.c: 155: if ((cx<23) || (cx>135))
      000403 A1 17            [ 1]  909 	cp	a, #0x17
      000405 25 04            [ 1]  910 	jrc	00101$
      000407 A1 87            [ 1]  911 	cp	a, #0x87
      000409 23 05            [ 2]  912 	jrule	00102$
      00040B                        913 00101$:
                                    914 ;	main.c: 156: c = RGB(8,27,0);
      00040B AE 08 C0         [ 2]  915 	ldw	x, #0x08c0
      00040E 1F 05            [ 2]  916 	ldw	(0x05, sp), x
      000410                        917 00102$:
                                    918 ;	main.c: 157: ST7735_DrawPixel(cx,y+j, c);
      000410 5F               [ 1]  919 	clrw	x
      000411 97               [ 1]  920 	ld	xl, a
      000412 16 05            [ 2]  921 	ldw	y, (0x05, sp)
      000414 90 89            [ 2]  922 	pushw	y
      000416 16 03            [ 2]  923 	ldw	y, (0x03, sp)
      000418 90 89            [ 2]  924 	pushw	y
      00041A 89               [ 2]  925 	pushw	x
      00041B CDr09rE8         [ 4]  926 	call	_ST7735_DrawPixel
      00041E 5B 06            [ 2]  927 	addw	sp, #6
      000420                        928 00110$:
                                    929 ;	main.c: 147: for (int i=0; i<8; ++i) 
      000420 1E 03            [ 2]  930 	ldw	x, (0x03, sp)
      000422 5C               [ 1]  931 	incw	x
      000423 1F 03            [ 2]  932 	ldw	(0x03, sp), x
      000425 20 A7            [ 2]  933 	jra	00109$
      000427                        934 00113$:
                                    935 ;	main.c: 146: for (int j=0; j<15; ++j)
      000427 1E 09            [ 2]  936 	ldw	x, (0x09, sp)
      000429 5C               [ 1]  937 	incw	x
      00042A 1F 09            [ 2]  938 	ldw	(0x09, sp), x
      00042C 20 8F            [ 2]  939 	jra	00112$
      00042E                        940 00114$:
                                    941 ;	main.c: 166: }
      00042E 5B 0A            [ 2]  942 	addw	sp, #10
      000430 81               [ 4]  943 	ret
                                    944 ;	main.c: 168: void drawGator(int x, int y, int id) {
                                    945 ;	-----------------------------------------
                                    946 ;	 function drawGator
                                    947 ;	-----------------------------------------
      000431                        948 _drawGator:
      000431 52 0B            [ 2]  949 	sub	sp, #11
                                    950 ;	main.c: 169: for (int j=0; j<8; ++j)
      000433 5F               [ 1]  951 	clrw	x
      000434 1F 0A            [ 2]  952 	ldw	(0x0a, sp), x
      000436                        953 00109$:
      000436 1E 0A            [ 2]  954 	ldw	x, (0x0a, sp)
      000438 A3 00 08         [ 2]  955 	cpw	x, #0x0008
      00043B 2E 6C            [ 1]  956 	jrsge	00111$
                                    957 ;	main.c: 170: for (int i=0; i<8; ++i) 
      00043D 1E 10            [ 2]  958 	ldw	x, (0x10, sp)
      00043F 72 FB 0A         [ 2]  959 	addw	x, (0x0a, sp)
      000442 1F 08            [ 2]  960 	ldw	(0x08, sp), x
      000444 5F               [ 1]  961 	clrw	x
      000445 1F 01            [ 2]  962 	ldw	(0x01, sp), x
      000447                        963 00106$:
      000447 1E 01            [ 2]  964 	ldw	x, (0x01, sp)
      000449 A3 00 08         [ 2]  965 	cpw	x, #0x0008
      00044C 2E 54            [ 1]  966 	jrsge	00110$
                                    967 ;	main.c: 172: uint8_t d = id?gator1_raw[j*8 + i]:gator2_raw[j*8 + i];
      00044E 7B 0B            [ 1]  968 	ld	a, (0x0b, sp)
      000450 88               [ 1]  969 	push	a
      000451 7B 03            [ 1]  970 	ld	a, (0x03, sp)
      000453 6B 08            [ 1]  971 	ld	(0x08, sp), a
      000455 84               [ 1]  972 	pop	a
      000456 48               [ 1]  973 	sll	a
      000457 48               [ 1]  974 	sll	a
      000458 48               [ 1]  975 	sll	a
      000459 1B 07            [ 1]  976 	add	a, (0x07, sp)
      00045B 6B 06            [ 1]  977 	ld	(0x06, sp), a
      00045D 7B 06            [ 1]  978 	ld	a, (0x06, sp)
      00045F 49               [ 1]  979 	rlc	a
      000460 4F               [ 1]  980 	clr	a
      000461 A2 00            [ 1]  981 	sbc	a, #0x00
      000463 6B 05            [ 1]  982 	ld	(0x05, sp), a
      000465 1E 12            [ 2]  983 	ldw	x, (0x12, sp)
      000467 27 08            [ 1]  984 	jreq	00113$
      000469 1E 05            [ 2]  985 	ldw	x, (0x05, sp)
      00046B 1Cr00r86         [ 2]  986 	addw	x, #_gator1_raw
      00046E F6               [ 1]  987 	ld	a, (x)
      00046F 20 08            [ 2]  988 	jra	00114$
      000471                        989 00113$:
      000471 1E 05            [ 2]  990 	ldw	x, (0x05, sp)
      000473 1Cr00rC6         [ 2]  991 	addw	x, #_gator2_raw
      000476 1F 03            [ 2]  992 	ldw	(0x03, sp), x
      000478 F6               [ 1]  993 	ld	a, (x)
      000479                        994 00114$:
                                    995 ;	main.c: 173: uint8_t b1 = HIGH_NIB(d);
      000479 4E               [ 1]  996 	swap	a
      00047A A4 0F            [ 1]  997 	and	a, #0x0f
      00047C A4 0F            [ 1]  998 	and	a, #0x0f
                                    999 ;	main.c: 175: if (b1 != 2)
      00047E A1 02            [ 1] 1000 	cp	a, #0x02
      000480 27 19            [ 1] 1001 	jreq	00107$
                                   1002 ;	main.c: 176: ST7735_DrawPixel(x+i*2,y+j, pallet[b1]);
      000482 5F               [ 1] 1003 	clrw	x
      000483 97               [ 1] 1004 	ld	xl, a
      000484 58               [ 2] 1005 	sllw	x
      000485 1Cr00r00         [ 2] 1006 	addw	x, #_pallet
      000488 FE               [ 2] 1007 	ldw	x, (x)
      000489 16 01            [ 2] 1008 	ldw	y, (0x01, sp)
      00048B 90 58            [ 2] 1009 	sllw	y
      00048D 72 F9 0E         [ 2] 1010 	addw	y, (0x0e, sp)
      000490 89               [ 2] 1011 	pushw	x
      000491 1E 0A            [ 2] 1012 	ldw	x, (0x0a, sp)
      000493 89               [ 2] 1013 	pushw	x
      000494 90 89            [ 2] 1014 	pushw	y
      000496 CDr09rE8         [ 4] 1015 	call	_ST7735_DrawPixel
      000499 5B 06            [ 2] 1016 	addw	sp, #6
      00049B                       1017 00107$:
                                   1018 ;	main.c: 170: for (int i=0; i<8; ++i) 
      00049B 1E 01            [ 2] 1019 	ldw	x, (0x01, sp)
      00049D 5C               [ 1] 1020 	incw	x
      00049E 1F 01            [ 2] 1021 	ldw	(0x01, sp), x
      0004A0 20 A5            [ 2] 1022 	jra	00106$
      0004A2                       1023 00110$:
                                   1024 ;	main.c: 169: for (int j=0; j<8; ++j)
      0004A2 1E 0A            [ 2] 1025 	ldw	x, (0x0a, sp)
      0004A4 5C               [ 1] 1026 	incw	x
      0004A5 1F 0A            [ 2] 1027 	ldw	(0x0a, sp), x
      0004A7 20 8D            [ 2] 1028 	jra	00109$
      0004A9                       1029 00111$:
                                   1030 ;	main.c: 180: }
      0004A9 5B 0B            [ 2] 1031 	addw	sp, #11
      0004AB 81               [ 4] 1032 	ret
                                   1033 ;	main.c: 182: void main(void)
                                   1034 ;	-----------------------------------------
                                   1035 ;	 function main
                                   1036 ;	-----------------------------------------
      0004AC                       1037 _main:
      0004AC 52 7D            [ 2] 1038 	sub	sp, #125
                                   1039 ;	main.c: 184: const uint8_t sine[48] = {
      0004AE 96               [ 1] 1040 	ldw	x, sp
      0004AF 1C 00 31         [ 2] 1041 	addw	x, #49
      0004B2 1F 61            [ 2] 1042 	ldw	(0x61, sp), x
      0004B4 A6 37            [ 1] 1043 	ld	a, #0x37
      0004B6 F7               [ 1] 1044 	ld	(x), a
      0004B7 1E 61            [ 2] 1045 	ldw	x, (0x61, sp)
      0004B9 5C               [ 1] 1046 	incw	x
      0004BA A6 3E            [ 1] 1047 	ld	a, #0x3e
      0004BC F7               [ 1] 1048 	ld	(x), a
      0004BD 1E 61            [ 2] 1049 	ldw	x, (0x61, sp)
      0004BF 5C               [ 1] 1050 	incw	x
      0004C0 5C               [ 1] 1051 	incw	x
      0004C1 A6 45            [ 1] 1052 	ld	a, #0x45
      0004C3 F7               [ 1] 1053 	ld	(x), a
      0004C4 1E 61            [ 2] 1054 	ldw	x, (0x61, sp)
      0004C6 A6 4B            [ 1] 1055 	ld	a, #0x4b
      0004C8 E7 03            [ 1] 1056 	ld	(0x0003, x), a
      0004CA 1E 61            [ 2] 1057 	ldw	x, (0x61, sp)
      0004CC A6 52            [ 1] 1058 	ld	a, #0x52
      0004CE E7 04            [ 1] 1059 	ld	(0x0004, x), a
      0004D0 1E 61            [ 2] 1060 	ldw	x, (0x61, sp)
      0004D2 A6 58            [ 1] 1061 	ld	a, #0x58
      0004D4 E7 05            [ 1] 1062 	ld	(0x0005, x), a
      0004D6 1E 61            [ 2] 1063 	ldw	x, (0x61, sp)
      0004D8 A6 5D            [ 1] 1064 	ld	a, #0x5d
      0004DA E7 06            [ 1] 1065 	ld	(0x0006, x), a
      0004DC 1E 61            [ 2] 1066 	ldw	x, (0x61, sp)
      0004DE A6 62            [ 1] 1067 	ld	a, #0x62
      0004E0 E7 07            [ 1] 1068 	ld	(0x0007, x), a
      0004E2 1E 61            [ 2] 1069 	ldw	x, (0x61, sp)
      0004E4 A6 66            [ 1] 1070 	ld	a, #0x66
      0004E6 E7 08            [ 1] 1071 	ld	(0x0008, x), a
      0004E8 1E 61            [ 2] 1072 	ldw	x, (0x61, sp)
      0004EA A6 69            [ 1] 1073 	ld	a, #0x69
      0004EC E7 09            [ 1] 1074 	ld	(0x0009, x), a
      0004EE 1E 61            [ 2] 1075 	ldw	x, (0x61, sp)
      0004F0 A6 6B            [ 1] 1076 	ld	a, #0x6b
      0004F2 E7 0A            [ 1] 1077 	ld	(0x000a, x), a
      0004F4 1E 61            [ 2] 1078 	ldw	x, (0x61, sp)
      0004F6 A6 6D            [ 1] 1079 	ld	a, #0x6d
      0004F8 E7 0B            [ 1] 1080 	ld	(0x000b, x), a
      0004FA 1E 61            [ 2] 1081 	ldw	x, (0x61, sp)
      0004FC A6 6D            [ 1] 1082 	ld	a, #0x6d
      0004FE E7 0C            [ 1] 1083 	ld	(0x000c, x), a
      000500 1E 61            [ 2] 1084 	ldw	x, (0x61, sp)
      000502 A6 6D            [ 1] 1085 	ld	a, #0x6d
      000504 E7 0D            [ 1] 1086 	ld	(0x000d, x), a
      000506 1E 61            [ 2] 1087 	ldw	x, (0x61, sp)
      000508 A6 6B            [ 1] 1088 	ld	a, #0x6b
      00050A E7 0E            [ 1] 1089 	ld	(0x000e, x), a
      00050C 1E 61            [ 2] 1090 	ldw	x, (0x61, sp)
      00050E A6 69            [ 1] 1091 	ld	a, #0x69
      000510 E7 0F            [ 1] 1092 	ld	(0x000f, x), a
      000512 1E 61            [ 2] 1093 	ldw	x, (0x61, sp)
      000514 A6 66            [ 1] 1094 	ld	a, #0x66
      000516 E7 10            [ 1] 1095 	ld	(0x0010, x), a
      000518 1E 61            [ 2] 1096 	ldw	x, (0x61, sp)
      00051A A6 62            [ 1] 1097 	ld	a, #0x62
      00051C E7 11            [ 1] 1098 	ld	(0x0011, x), a
      00051E 1E 61            [ 2] 1099 	ldw	x, (0x61, sp)
      000520 A6 5D            [ 1] 1100 	ld	a, #0x5d
      000522 E7 12            [ 1] 1101 	ld	(0x0012, x), a
      000524 1E 61            [ 2] 1102 	ldw	x, (0x61, sp)
      000526 A6 58            [ 1] 1103 	ld	a, #0x58
      000528 E7 13            [ 1] 1104 	ld	(0x0013, x), a
      00052A 1E 61            [ 2] 1105 	ldw	x, (0x61, sp)
      00052C A6 52            [ 1] 1106 	ld	a, #0x52
      00052E E7 14            [ 1] 1107 	ld	(0x0014, x), a
      000530 1E 61            [ 2] 1108 	ldw	x, (0x61, sp)
      000532 A6 4B            [ 1] 1109 	ld	a, #0x4b
      000534 E7 15            [ 1] 1110 	ld	(0x0015, x), a
      000536 1E 61            [ 2] 1111 	ldw	x, (0x61, sp)
      000538 A6 45            [ 1] 1112 	ld	a, #0x45
      00053A E7 16            [ 1] 1113 	ld	(0x0016, x), a
      00053C 1E 61            [ 2] 1114 	ldw	x, (0x61, sp)
      00053E A6 3E            [ 1] 1115 	ld	a, #0x3e
      000540 E7 17            [ 1] 1116 	ld	(0x0017, x), a
      000542 1E 61            [ 2] 1117 	ldw	x, (0x61, sp)
      000544 A6 37            [ 1] 1118 	ld	a, #0x37
      000546 E7 18            [ 1] 1119 	ld	(0x0018, x), a
      000548 1E 61            [ 2] 1120 	ldw	x, (0x61, sp)
      00054A A6 2F            [ 1] 1121 	ld	a, #0x2f
      00054C E7 19            [ 1] 1122 	ld	(0x0019, x), a
      00054E 1E 61            [ 2] 1123 	ldw	x, (0x61, sp)
      000550 A6 28            [ 1] 1124 	ld	a, #0x28
      000552 E7 1A            [ 1] 1125 	ld	(0x001a, x), a
      000554 1E 61            [ 2] 1126 	ldw	x, (0x61, sp)
      000556 A6 22            [ 1] 1127 	ld	a, #0x22
      000558 E7 1B            [ 1] 1128 	ld	(0x001b, x), a
      00055A 1E 61            [ 2] 1129 	ldw	x, (0x61, sp)
      00055C A6 1B            [ 1] 1130 	ld	a, #0x1b
      00055E E7 1C            [ 1] 1131 	ld	(0x001c, x), a
      000560 1E 61            [ 2] 1132 	ldw	x, (0x61, sp)
      000562 A6 15            [ 1] 1133 	ld	a, #0x15
      000564 E7 1D            [ 1] 1134 	ld	(0x001d, x), a
      000566 1E 61            [ 2] 1135 	ldw	x, (0x61, sp)
      000568 A6 10            [ 1] 1136 	ld	a, #0x10
      00056A E7 1E            [ 1] 1137 	ld	(0x001e, x), a
      00056C 1E 61            [ 2] 1138 	ldw	x, (0x61, sp)
      00056E A6 0B            [ 1] 1139 	ld	a, #0x0b
      000570 E7 1F            [ 1] 1140 	ld	(0x001f, x), a
      000572 1E 61            [ 2] 1141 	ldw	x, (0x61, sp)
      000574 A6 07            [ 1] 1142 	ld	a, #0x07
      000576 E7 20            [ 1] 1143 	ld	(0x0020, x), a
      000578 1E 61            [ 2] 1144 	ldw	x, (0x61, sp)
      00057A A6 04            [ 1] 1145 	ld	a, #0x04
      00057C E7 21            [ 1] 1146 	ld	(0x0021, x), a
      00057E 1E 61            [ 2] 1147 	ldw	x, (0x61, sp)
      000580 A6 02            [ 1] 1148 	ld	a, #0x02
      000582 E7 22            [ 1] 1149 	ld	(0x0022, x), a
      000584 1E 61            [ 2] 1150 	ldw	x, (0x61, sp)
      000586 6F 23            [ 1] 1151 	clr	(0x0023, x)
      000588 1E 61            [ 2] 1152 	ldw	x, (0x61, sp)
      00058A 6F 24            [ 1] 1153 	clr	(0x0024, x)
      00058C 1E 61            [ 2] 1154 	ldw	x, (0x61, sp)
      00058E 6F 25            [ 1] 1155 	clr	(0x0025, x)
      000590 1E 61            [ 2] 1156 	ldw	x, (0x61, sp)
      000592 A6 02            [ 1] 1157 	ld	a, #0x02
      000594 E7 26            [ 1] 1158 	ld	(0x0026, x), a
      000596 1E 61            [ 2] 1159 	ldw	x, (0x61, sp)
      000598 A6 04            [ 1] 1160 	ld	a, #0x04
      00059A E7 27            [ 1] 1161 	ld	(0x0027, x), a
      00059C 1E 61            [ 2] 1162 	ldw	x, (0x61, sp)
      00059E A6 07            [ 1] 1163 	ld	a, #0x07
      0005A0 E7 28            [ 1] 1164 	ld	(0x0028, x), a
      0005A2 1E 61            [ 2] 1165 	ldw	x, (0x61, sp)
      0005A4 A6 0B            [ 1] 1166 	ld	a, #0x0b
      0005A6 E7 29            [ 1] 1167 	ld	(0x0029, x), a
      0005A8 1E 61            [ 2] 1168 	ldw	x, (0x61, sp)
      0005AA A6 10            [ 1] 1169 	ld	a, #0x10
      0005AC E7 2A            [ 1] 1170 	ld	(0x002a, x), a
      0005AE 1E 61            [ 2] 1171 	ldw	x, (0x61, sp)
      0005B0 A6 15            [ 1] 1172 	ld	a, #0x15
      0005B2 E7 2B            [ 1] 1173 	ld	(0x002b, x), a
      0005B4 1E 61            [ 2] 1174 	ldw	x, (0x61, sp)
      0005B6 A6 1B            [ 1] 1175 	ld	a, #0x1b
      0005B8 E7 2C            [ 1] 1176 	ld	(0x002c, x), a
      0005BA 1E 61            [ 2] 1177 	ldw	x, (0x61, sp)
      0005BC A6 22            [ 1] 1178 	ld	a, #0x22
      0005BE E7 2D            [ 1] 1179 	ld	(0x002d, x), a
      0005C0 1E 61            [ 2] 1180 	ldw	x, (0x61, sp)
      0005C2 A6 28            [ 1] 1181 	ld	a, #0x28
      0005C4 E7 2E            [ 1] 1182 	ld	(0x002e, x), a
      0005C6 1E 61            [ 2] 1183 	ldw	x, (0x61, sp)
      0005C8 A6 2F            [ 1] 1184 	ld	a, #0x2f
      0005CA E7 2F            [ 1] 1185 	ld	(0x002f, x), a
                                   1186 ;	main.c: 189: const uint8_t cos[48] = {
      0005CC 96               [ 1] 1187 	ldw	x, sp
      0005CD 5C               [ 1] 1188 	incw	x
      0005CE 1F 6F            [ 2] 1189 	ldw	(0x6f, sp), x
      0005D0 A6 0D            [ 1] 1190 	ld	a, #0x0d
      0005D2 F7               [ 1] 1191 	ld	(x), a
      0005D3 1E 6F            [ 2] 1192 	ldw	x, (0x6f, sp)
      0005D5 5C               [ 1] 1193 	incw	x
      0005D6 A6 0D            [ 1] 1194 	ld	a, #0x0d
      0005D8 F7               [ 1] 1195 	ld	(x), a
      0005D9 1E 6F            [ 2] 1196 	ldw	x, (0x6f, sp)
      0005DB 5C               [ 1] 1197 	incw	x
      0005DC 5C               [ 1] 1198 	incw	x
      0005DD A6 0D            [ 1] 1199 	ld	a, #0x0d
      0005DF F7               [ 1] 1200 	ld	(x), a
      0005E0 1E 6F            [ 2] 1201 	ldw	x, (0x6f, sp)
      0005E2 A6 0C            [ 1] 1202 	ld	a, #0x0c
      0005E4 E7 03            [ 1] 1203 	ld	(0x0003, x), a
      0005E6 1E 6F            [ 2] 1204 	ldw	x, (0x6f, sp)
      0005E8 A6 0B            [ 1] 1205 	ld	a, #0x0b
      0005EA E7 04            [ 1] 1206 	ld	(0x0004, x), a
      0005EC 1E 6F            [ 2] 1207 	ldw	x, (0x6f, sp)
      0005EE A6 0A            [ 1] 1208 	ld	a, #0x0a
      0005F0 E7 05            [ 1] 1209 	ld	(0x0005, x), a
      0005F2 1E 6F            [ 2] 1210 	ldw	x, (0x6f, sp)
      0005F4 A6 09            [ 1] 1211 	ld	a, #0x09
      0005F6 E7 06            [ 1] 1212 	ld	(0x0006, x), a
      0005F8 1E 6F            [ 2] 1213 	ldw	x, (0x6f, sp)
      0005FA A6 08            [ 1] 1214 	ld	a, #0x08
      0005FC E7 07            [ 1] 1215 	ld	(0x0007, x), a
      0005FE 1E 6F            [ 2] 1216 	ldw	x, (0x6f, sp)
      000600 A6 06            [ 1] 1217 	ld	a, #0x06
      000602 E7 08            [ 1] 1218 	ld	(0x0008, x), a
      000604 1E 6F            [ 2] 1219 	ldw	x, (0x6f, sp)
      000606 A6 05            [ 1] 1220 	ld	a, #0x05
      000608 E7 09            [ 1] 1221 	ld	(0x0009, x), a
      00060A 1E 6F            [ 2] 1222 	ldw	x, (0x6f, sp)
      00060C A6 03            [ 1] 1223 	ld	a, #0x03
      00060E E7 0A            [ 1] 1224 	ld	(0x000a, x), a
      000610 1E 6F            [ 2] 1225 	ldw	x, (0x6f, sp)
      000612 A6 01            [ 1] 1226 	ld	a, #0x01
      000614 E7 0B            [ 1] 1227 	ld	(0x000b, x), a
      000616 1E 6F            [ 2] 1228 	ldw	x, (0x6f, sp)
      000618 6F 0C            [ 1] 1229 	clr	(0x000c, x)
      00061A 1E 6F            [ 2] 1230 	ldw	x, (0x6f, sp)
      00061C A6 02            [ 1] 1231 	ld	a, #0x02
      00061E E7 0D            [ 1] 1232 	ld	(0x000d, x), a
      000620 1E 6F            [ 2] 1233 	ldw	x, (0x6f, sp)
      000622 A6 03            [ 1] 1234 	ld	a, #0x03
      000624 E7 0E            [ 1] 1235 	ld	(0x000e, x), a
      000626 1E 6F            [ 2] 1236 	ldw	x, (0x6f, sp)
      000628 A6 05            [ 1] 1237 	ld	a, #0x05
      00062A E7 0F            [ 1] 1238 	ld	(0x000f, x), a
      00062C 1E 6F            [ 2] 1239 	ldw	x, (0x6f, sp)
      00062E A6 07            [ 1] 1240 	ld	a, #0x07
      000630 E7 10            [ 1] 1241 	ld	(0x0010, x), a
      000632 1E 6F            [ 2] 1242 	ldw	x, (0x6f, sp)
      000634 A6 08            [ 1] 1243 	ld	a, #0x08
      000636 E7 11            [ 1] 1244 	ld	(0x0011, x), a
      000638 1E 6F            [ 2] 1245 	ldw	x, (0x6f, sp)
      00063A A6 09            [ 1] 1246 	ld	a, #0x09
      00063C E7 12            [ 1] 1247 	ld	(0x0012, x), a
      00063E 1E 6F            [ 2] 1248 	ldw	x, (0x6f, sp)
      000640 A6 0B            [ 1] 1249 	ld	a, #0x0b
      000642 E7 13            [ 1] 1250 	ld	(0x0013, x), a
      000644 1E 6F            [ 2] 1251 	ldw	x, (0x6f, sp)
      000646 A6 0C            [ 1] 1252 	ld	a, #0x0c
      000648 E7 14            [ 1] 1253 	ld	(0x0014, x), a
      00064A 1E 6F            [ 2] 1254 	ldw	x, (0x6f, sp)
      00064C A6 0C            [ 1] 1255 	ld	a, #0x0c
      00064E E7 15            [ 1] 1256 	ld	(0x0015, x), a
      000650 1E 6F            [ 2] 1257 	ldw	x, (0x6f, sp)
      000652 A6 0D            [ 1] 1258 	ld	a, #0x0d
      000654 E7 16            [ 1] 1259 	ld	(0x0016, x), a
      000656 1E 6F            [ 2] 1260 	ldw	x, (0x6f, sp)
      000658 A6 0D            [ 1] 1261 	ld	a, #0x0d
      00065A E7 17            [ 1] 1262 	ld	(0x0017, x), a
      00065C 1E 6F            [ 2] 1263 	ldw	x, (0x6f, sp)
      00065E A6 0D            [ 1] 1264 	ld	a, #0x0d
      000660 E7 18            [ 1] 1265 	ld	(0x0018, x), a
      000662 1E 6F            [ 2] 1266 	ldw	x, (0x6f, sp)
      000664 A6 0D            [ 1] 1267 	ld	a, #0x0d
      000666 E7 19            [ 1] 1268 	ld	(0x0019, x), a
      000668 1E 6F            [ 2] 1269 	ldw	x, (0x6f, sp)
      00066A A6 0D            [ 1] 1270 	ld	a, #0x0d
      00066C E7 1A            [ 1] 1271 	ld	(0x001a, x), a
      00066E 1E 6F            [ 2] 1272 	ldw	x, (0x6f, sp)
      000670 A6 0C            [ 1] 1273 	ld	a, #0x0c
      000672 E7 1B            [ 1] 1274 	ld	(0x001b, x), a
      000674 1E 6F            [ 2] 1275 	ldw	x, (0x6f, sp)
      000676 A6 0C            [ 1] 1276 	ld	a, #0x0c
      000678 E7 1C            [ 1] 1277 	ld	(0x001c, x), a
      00067A 1E 6F            [ 2] 1278 	ldw	x, (0x6f, sp)
      00067C A6 0B            [ 1] 1279 	ld	a, #0x0b
      00067E E7 1D            [ 1] 1280 	ld	(0x001d, x), a
      000680 1E 6F            [ 2] 1281 	ldw	x, (0x6f, sp)
      000682 A6 09            [ 1] 1282 	ld	a, #0x09
      000684 E7 1E            [ 1] 1283 	ld	(0x001e, x), a
      000686 1E 6F            [ 2] 1284 	ldw	x, (0x6f, sp)
      000688 A6 08            [ 1] 1285 	ld	a, #0x08
      00068A E7 1F            [ 1] 1286 	ld	(0x001f, x), a
      00068C 1E 6F            [ 2] 1287 	ldw	x, (0x6f, sp)
      00068E A6 07            [ 1] 1288 	ld	a, #0x07
      000690 E7 20            [ 1] 1289 	ld	(0x0020, x), a
      000692 1E 6F            [ 2] 1290 	ldw	x, (0x6f, sp)
      000694 A6 05            [ 1] 1291 	ld	a, #0x05
      000696 E7 21            [ 1] 1292 	ld	(0x0021, x), a
      000698 1E 6F            [ 2] 1293 	ldw	x, (0x6f, sp)
      00069A A6 03            [ 1] 1294 	ld	a, #0x03
      00069C E7 22            [ 1] 1295 	ld	(0x0022, x), a
      00069E 1E 6F            [ 2] 1296 	ldw	x, (0x6f, sp)
      0006A0 A6 02            [ 1] 1297 	ld	a, #0x02
      0006A2 E7 23            [ 1] 1298 	ld	(0x0023, x), a
      0006A4 1E 6F            [ 2] 1299 	ldw	x, (0x6f, sp)
      0006A6 6F 24            [ 1] 1300 	clr	(0x0024, x)
      0006A8 1E 6F            [ 2] 1301 	ldw	x, (0x6f, sp)
      0006AA A6 01            [ 1] 1302 	ld	a, #0x01
      0006AC E7 25            [ 1] 1303 	ld	(0x0025, x), a
      0006AE 1E 6F            [ 2] 1304 	ldw	x, (0x6f, sp)
      0006B0 A6 03            [ 1] 1305 	ld	a, #0x03
      0006B2 E7 26            [ 1] 1306 	ld	(0x0026, x), a
      0006B4 1E 6F            [ 2] 1307 	ldw	x, (0x6f, sp)
      0006B6 A6 05            [ 1] 1308 	ld	a, #0x05
      0006B8 E7 27            [ 1] 1309 	ld	(0x0027, x), a
      0006BA 1E 6F            [ 2] 1310 	ldw	x, (0x6f, sp)
      0006BC A6 06            [ 1] 1311 	ld	a, #0x06
      0006BE E7 28            [ 1] 1312 	ld	(0x0028, x), a
      0006C0 1E 6F            [ 2] 1313 	ldw	x, (0x6f, sp)
      0006C2 A6 08            [ 1] 1314 	ld	a, #0x08
      0006C4 E7 29            [ 1] 1315 	ld	(0x0029, x), a
      0006C6 1E 6F            [ 2] 1316 	ldw	x, (0x6f, sp)
      0006C8 A6 09            [ 1] 1317 	ld	a, #0x09
      0006CA E7 2A            [ 1] 1318 	ld	(0x002a, x), a
      0006CC 1E 6F            [ 2] 1319 	ldw	x, (0x6f, sp)
      0006CE A6 0A            [ 1] 1320 	ld	a, #0x0a
      0006D0 E7 2B            [ 1] 1321 	ld	(0x002b, x), a
      0006D2 1E 6F            [ 2] 1322 	ldw	x, (0x6f, sp)
      0006D4 A6 0B            [ 1] 1323 	ld	a, #0x0b
      0006D6 E7 2C            [ 1] 1324 	ld	(0x002c, x), a
      0006D8 1E 6F            [ 2] 1325 	ldw	x, (0x6f, sp)
      0006DA A6 0C            [ 1] 1326 	ld	a, #0x0c
      0006DC E7 2D            [ 1] 1327 	ld	(0x002d, x), a
      0006DE 1E 6F            [ 2] 1328 	ldw	x, (0x6f, sp)
      0006E0 A6 0D            [ 1] 1329 	ld	a, #0x0d
      0006E2 E7 2E            [ 1] 1330 	ld	(0x002e, x), a
      0006E4 1E 6F            [ 2] 1331 	ldw	x, (0x6f, sp)
      0006E6 A6 0D            [ 1] 1332 	ld	a, #0x0d
      0006E8 E7 2F            [ 1] 1333 	ld	(0x002f, x), a
                                   1334 ;	main.c: 32: for (i = 0; i < ((F_CPU / 18000UL) * ms); i++)
      0006EA 90 5F            [ 1] 1335 	clrw	y
      0006EC 5F               [ 1] 1336 	clrw	x
      0006ED 1F 71            [ 2] 1337 	ldw	(0x71, sp), x
      0006EF                       1338 00113$:
      0006EF 90 A3 14 C8      [ 2] 1339 	cpw	y, #0x14c8
      0006F3 7B 72            [ 1] 1340 	ld	a, (0x72, sp)
      0006F5 A2 05            [ 1] 1341 	sbc	a, #0x05
      0006F7 7B 71            [ 1] 1342 	ld	a, (0x71, sp)
      0006F9 A2 00            [ 1] 1343 	sbc	a, #0x00
      0006FB 24 0C            [ 1] 1344 	jrnc	00109$
                                   1345 ;	main.c: 33: __asm__("nop");
      0006FD 9D               [ 1] 1346 	nop
                                   1347 ;	main.c: 32: for (i = 0; i < ((F_CPU / 18000UL) * ms); i++)
      0006FE 90 5C            [ 1] 1348 	incw	y
      000700 26 ED            [ 1] 1349 	jrne	00113$
      000702 1E 71            [ 2] 1350 	ldw	x, (0x71, sp)
      000704 5C               [ 1] 1351 	incw	x
      000705 1F 71            [ 2] 1352 	ldw	(0x71, sp), x
      000707 20 E6            [ 2] 1353 	jra	00113$
                                   1354 ;	main.c: 194: delay_ms(3000);
      000709                       1355 00109$:
                                   1356 ;	main.c: 196: init_clock();
      000709 CDr00r4D         [ 4] 1357 	call	_init_clock
                                   1358 ;	main.c: 197: ST7735_Init();
      00070C CDr0ArDA         [ 4] 1359 	call	_ST7735_Init
                                   1360 ;	main.c: 199: __asm__ ("rim"); //enable interrupts
      00070F 9A               [ 1] 1361 	rim
                                   1362 ;	main.c: 207: drawscene();
      000710 CDr00r5A         [ 4] 1363 	call	_drawscene
                                   1364 ;	main.c: 210: uint8_t lx =80;
      000713 A6 50            [ 1] 1365 	ld	a, #0x50
      000715 6B 7D            [ 1] 1366 	ld	(0x7d, sp), a
                                   1367 ;	main.c: 211: uint8_t ly =20;
      000717 A6 14            [ 1] 1368 	ld	a, #0x14
      000719 6B 7C            [ 1] 1369 	ld	(0x7c, sp), a
                                   1370 ;	main.c: 213: while(1) {
      00071B 5F               [ 1] 1371 	clrw	x
      00071C 1F 67            [ 2] 1372 	ldw	(0x67, sp), x
      00071E 1F 65            [ 2] 1373 	ldw	(0x65, sp), x
      000720                       1374 00106$:
                                   1375 ;	main.c: 214: uint8_t x = 24 + sine[frame%48];
      000720 4B 30            [ 1] 1376 	push	#0x30
      000722 5F               [ 1] 1377 	clrw	x
      000723 89               [ 2] 1378 	pushw	x
      000724 4B 00            [ 1] 1379 	push	#0x00
      000726 1E 6B            [ 2] 1380 	ldw	x, (0x6b, sp)
      000728 89               [ 2] 1381 	pushw	x
      000729 1E 6B            [ 2] 1382 	ldw	x, (0x6b, sp)
      00072B 89               [ 2] 1383 	pushw	x
      00072C CDr00r00         [ 4] 1384 	call	__modulong
      00072F 5B 08            [ 2] 1385 	addw	sp, #8
      000731 17 6B            [ 2] 1386 	ldw	(0x6b, sp), y
      000733 90 93            [ 1] 1387 	ldw	y, x
      000735 72 F9 61         [ 2] 1388 	addw	y, (0x61, sp)
      000738 90 F6            [ 1] 1389 	ld	a, (y)
      00073A AB 18            [ 1] 1390 	add	a, #0x18
      00073C 6B 7B            [ 1] 1391 	ld	(0x7b, sp), a
                                   1392 ;	main.c: 215: uint8_t y = 36 + cos[frame%48];
      00073E 72 FB 6F         [ 2] 1393 	addw	x, (0x6f, sp)
      000741 F6               [ 1] 1394 	ld	a, (x)
      000742 AB 24            [ 1] 1395 	add	a, #0x24
      000744 6B 7A            [ 1] 1396 	ld	(0x7a, sp), a
                                   1397 ;	main.c: 216: ST7735_DrawLine(80, 0, lx, ly, RGB(95,144,47));
      000746 90 5F            [ 1] 1398 	clrw	y
      000748 7B 7C            [ 1] 1399 	ld	a, (0x7c, sp)
      00074A 90 97            [ 1] 1400 	ld	yl, a
      00074C 5F               [ 1] 1401 	clrw	x
      00074D 7B 7D            [ 1] 1402 	ld	a, (0x7d, sp)
      00074F 97               [ 1] 1403 	ld	xl, a
      000750 89               [ 2] 1404 	pushw	x
      000751 90 89            [ 2] 1405 	pushw	y
      000753 4B 85            [ 1] 1406 	push	#0x85
      000755 4B 5C            [ 1] 1407 	push	#0x5c
      000757 90 89            [ 2] 1408 	pushw	y
      000759 89               [ 2] 1409 	pushw	x
      00075A 4B 00            [ 1] 1410 	push	#0x00
      00075C 4B 00            [ 1] 1411 	push	#0x00
      00075E 4B 50            [ 1] 1412 	push	#0x50
      000760 4B 00            [ 1] 1413 	push	#0x00
      000762 CDr0Ar0B         [ 4] 1414 	call	_ST7735_DrawLine
      000765 5B 0A            [ 2] 1415 	addw	sp, #10
      000767 90 85            [ 2] 1416 	popw	y
      000769 85               [ 2] 1417 	popw	x
                                   1418 ;	main.c: 217: clearHarry(lx-8,ly-2);
      00076A 72 A2 00 02      [ 2] 1419 	subw	y, #0x0002
      00076E 1D 00 08         [ 2] 1420 	subw	x, #0x0008
      000771 90 89            [ 2] 1421 	pushw	y
      000773 89               [ 2] 1422 	pushw	x
      000774 CDr03rB8         [ 4] 1423 	call	_clearHarry
      000777 5B 04            [ 2] 1424 	addw	sp, #4
                                   1425 ;	main.c: 218: ST7735_Fill(30, 61, 100, 1, RGB(159,174,29));
      000779 4B 63            [ 1] 1426 	push	#0x63
      00077B 4B 9D            [ 1] 1427 	push	#0x9d
      00077D 4B 01            [ 1] 1428 	push	#0x01
      00077F 4B 64            [ 1] 1429 	push	#0x64
      000781 4B 3D            [ 1] 1430 	push	#0x3d
      000783 4B 1E            [ 1] 1431 	push	#0x1e
      000785 CDr0FrB4         [ 4] 1432 	call	_ST7735_Fill
      000788 5B 06            [ 2] 1433 	addw	sp, #6
                                   1434 ;	main.c: 219: ST7735_Fill(23, 34, 1, 24, RGB(8,27,0));
      00078A 4B C0            [ 1] 1435 	push	#0xc0
      00078C 4B 08            [ 1] 1436 	push	#0x08
      00078E 4B 18            [ 1] 1437 	push	#0x18
      000790 4B 01            [ 1] 1438 	push	#0x01
      000792 4B 22            [ 1] 1439 	push	#0x22
      000794 4B 17            [ 1] 1440 	push	#0x17
      000796 CDr0FrB4         [ 4] 1441 	call	_ST7735_Fill
      000799 5B 06            [ 2] 1442 	addw	sp, #6
                                   1443 ;	main.c: 220: ST7735_Fill(136, 34, 1, 24, RGB(8,27,0));
      00079B 4B C0            [ 1] 1444 	push	#0xc0
      00079D 4B 08            [ 1] 1445 	push	#0x08
      00079F 4B 18            [ 1] 1446 	push	#0x18
      0007A1 4B 01            [ 1] 1447 	push	#0x01
      0007A3 4B 22            [ 1] 1448 	push	#0x22
      0007A5 4B 88            [ 1] 1449 	push	#0x88
      0007A7 CDr0FrB4         [ 4] 1450 	call	_ST7735_Fill
      0007AA 5B 06            [ 2] 1451 	addw	sp, #6
                                   1452 ;	main.c: 221: ST7735_DrawLine(80, 0, x, y, RGB(8,27,0));
      0007AC 90 5F            [ 1] 1453 	clrw	y
      0007AE 7B 7A            [ 1] 1454 	ld	a, (0x7a, sp)
      0007B0 90 97            [ 1] 1455 	ld	yl, a
      0007B2 5F               [ 1] 1456 	clrw	x
      0007B3 7B 7B            [ 1] 1457 	ld	a, (0x7b, sp)
      0007B5 97               [ 1] 1458 	ld	xl, a
      0007B6 89               [ 2] 1459 	pushw	x
      0007B7 90 89            [ 2] 1460 	pushw	y
      0007B9 4B C0            [ 1] 1461 	push	#0xc0
      0007BB 4B 08            [ 1] 1462 	push	#0x08
      0007BD 90 89            [ 2] 1463 	pushw	y
      0007BF 89               [ 2] 1464 	pushw	x
      0007C0 4B 00            [ 1] 1465 	push	#0x00
      0007C2 4B 00            [ 1] 1466 	push	#0x00
      0007C4 4B 50            [ 1] 1467 	push	#0x50
      0007C6 4B 00            [ 1] 1468 	push	#0x00
      0007C8 CDr0Ar0B         [ 4] 1469 	call	_ST7735_DrawLine
      0007CB 5B 0A            [ 2] 1470 	addw	sp, #10
      0007CD 90 85            [ 2] 1471 	popw	y
      0007CF 85               [ 2] 1472 	popw	x
                                   1473 ;	main.c: 222: drawHarry(x-8,y-2);
      0007D0 72 A2 00 02      [ 2] 1474 	subw	y, #0x0002
      0007D4 1D 00 08         [ 2] 1475 	subw	x, #0x0008
      0007D7 90 89            [ 2] 1476 	pushw	y
      0007D9 89               [ 2] 1477 	pushw	x
      0007DA CDr03r53         [ 4] 1478 	call	_drawHarry
      0007DD 5B 04            [ 2] 1479 	addw	sp, #4
                                   1480 ;	main.c: 224: ST7735_SetAddrWindow(0, 63, 160, 4);
      0007DF 4B 04            [ 1] 1481 	push	#0x04
      0007E1 4B A0            [ 1] 1482 	push	#0xa0
      0007E3 4B 3F            [ 1] 1483 	push	#0x3f
      0007E5 4B 00            [ 1] 1484 	push	#0x00
      0007E7 CDr09r62         [ 4] 1485 	call	_ST7735_SetAddrWindow
      0007EA 5B 04            [ 2] 1486 	addw	sp, #4
                                   1487 ;	main.c: 225: for (int j=2; j<6; ++j) {
      0007EC AE 00 02         [ 2] 1488 	ldw	x, #0x0002
      0007EF 1F 78            [ 2] 1489 	ldw	(0x78, sp), x
      0007F1                       1490 00125$:
      0007F1 1E 78            [ 2] 1491 	ldw	x, (0x78, sp)
      0007F3 A3 00 06         [ 2] 1492 	cpw	x, #0x0006
      0007F6 2E 6A            [ 1] 1493 	jrsge	00104$
                                   1494 ;	main.c: 226: uint8_t r = pool[j];
      0007F8 1E 78            [ 2] 1495 	ldw	x, (0x78, sp)
      0007FA 1Cr01r06         [ 2] 1496 	addw	x, #_pool
      0007FD F6               [ 1] 1497 	ld	a, (x)
                                   1498 ;	main.c: 227: uint8_t t = 80-r/2;
      0007FE 6B 6A            [ 1] 1499 	ld	(0x6a, sp), a
      000800 0F 69            [ 1] 1500 	clr	(0x69, sp)
      000802 4B 02            [ 1] 1501 	push	#0x02
      000804 4B 00            [ 1] 1502 	push	#0x00
      000806 1E 6B            [ 2] 1503 	ldw	x, (0x6b, sp)
      000808 89               [ 2] 1504 	pushw	x
      000809 CDr00r00         [ 4] 1505 	call	__divsint
      00080C 5B 04            [ 2] 1506 	addw	sp, #4
      00080E A6 50            [ 1] 1507 	ld	a, #0x50
      000810 89               [ 2] 1508 	pushw	x
      000811 10 02            [ 1] 1509 	sub	a, (#2, sp)
      000813 85               [ 2] 1510 	popw	x
      000814 6B 77            [ 1] 1511 	ld	(0x77, sp), a
                                   1512 ;	main.c: 228: for (int i=0; i<t; ++i)
      000816 5F               [ 1] 1513 	clrw	x
      000817                       1514 00116$:
      000817 7B 77            [ 1] 1515 	ld	a, (0x77, sp)
      000819 6B 64            [ 1] 1516 	ld	(0x64, sp), a
      00081B 0F 63            [ 1] 1517 	clr	(0x63, sp)
      00081D 13 63            [ 2] 1518 	cpw	x, (0x63, sp)
      00081F 2E 0E            [ 1] 1519 	jrsge	00101$
                                   1520 ;	main.c: 229: ST7735_Write16(RGB(159,174,29));
      000821 89               [ 2] 1521 	pushw	x
      000822 4B 63            [ 1] 1522 	push	#0x63
      000824 4B 9D            [ 1] 1523 	push	#0x9d
      000826 CDr09r39         [ 4] 1524 	call	_ST7735_Write16
      000829 5B 02            [ 2] 1525 	addw	sp, #2
      00082B 85               [ 2] 1526 	popw	x
                                   1527 ;	main.c: 228: for (int i=0; i<t; ++i)
      00082C 5C               [ 1] 1528 	incw	x
      00082D 20 E8            [ 2] 1529 	jra	00116$
      00082F                       1530 00101$:
                                   1531 ;	main.c: 230: for (int i=0; i<r; ++i)
      00082F 5F               [ 1] 1532 	clrw	x
      000830                       1533 00119$:
      000830 13 69            [ 2] 1534 	cpw	x, (0x69, sp)
      000832 2E 0E            [ 1] 1535 	jrsge	00102$
                                   1536 ;	main.c: 231: ST7735_Write16(RGB(27,98,139));
      000834 89               [ 2] 1537 	pushw	x
      000835 4B 11            [ 1] 1538 	push	#0x11
      000837 4B 1B            [ 1] 1539 	push	#0x1b
      000839 CDr09r39         [ 4] 1540 	call	_ST7735_Write16
      00083C 5B 02            [ 2] 1541 	addw	sp, #2
      00083E 85               [ 2] 1542 	popw	x
                                   1543 ;	main.c: 230: for (int i=0; i<r; ++i)
      00083F 5C               [ 1] 1544 	incw	x
      000840 20 EE            [ 2] 1545 	jra	00119$
      000842                       1546 00102$:
                                   1547 ;	main.c: 232: for (int i=0; i<t; ++i)
      000842 5F               [ 1] 1548 	clrw	x
      000843 1F 75            [ 2] 1549 	ldw	(0x75, sp), x
      000845                       1550 00122$:
      000845 1E 75            [ 2] 1551 	ldw	x, (0x75, sp)
      000847 13 63            [ 2] 1552 	cpw	x, (0x63, sp)
      000849 2E 10            [ 1] 1553 	jrsge	00126$
                                   1554 ;	main.c: 233: ST7735_Write16(RGB(159,174,29));
      00084B 4B 63            [ 1] 1555 	push	#0x63
      00084D 4B 9D            [ 1] 1556 	push	#0x9d
      00084F CDr09r39         [ 4] 1557 	call	_ST7735_Write16
      000852 5B 02            [ 2] 1558 	addw	sp, #2
                                   1559 ;	main.c: 232: for (int i=0; i<t; ++i)
      000854 1E 75            [ 2] 1560 	ldw	x, (0x75, sp)
      000856 5C               [ 1] 1561 	incw	x
      000857 1F 75            [ 2] 1562 	ldw	(0x75, sp), x
      000859 20 EA            [ 2] 1563 	jra	00122$
      00085B                       1564 00126$:
                                   1565 ;	main.c: 225: for (int j=2; j<6; ++j) {
      00085B 1E 78            [ 2] 1566 	ldw	x, (0x78, sp)
      00085D 5C               [ 1] 1567 	incw	x
      00085E 1F 78            [ 2] 1568 	ldw	(0x78, sp), x
      000860 20 8F            [ 2] 1569 	jra	00125$
      000862                       1570 00104$:
                                   1571 ;	main.c: 236: drawGator(40, 64, (frame%64)<32);
      000862 7B 68            [ 1] 1572 	ld	a, (0x68, sp)
      000864 A4 3F            [ 1] 1573 	and	a, #0x3f
      000866 97               [ 1] 1574 	ld	xl, a
      000867 4F               [ 1] 1575 	clr	a
      000868 95               [ 1] 1576 	ld	xh, a
      000869 90 5F            [ 1] 1577 	clrw	y
      00086B A3 00 20         [ 2] 1578 	cpw	x, #0x0020
      00086E 90 9F            [ 1] 1579 	ld	a, yl
      000870 A2 00            [ 1] 1580 	sbc	a, #0x00
      000872 90 9E            [ 1] 1581 	ld	a, yh
      000874 A2 00            [ 1] 1582 	sbc	a, #0x00
      000876 4F               [ 1] 1583 	clr	a
      000877 49               [ 1] 1584 	rlc	a
      000878 5F               [ 1] 1585 	clrw	x
      000879 97               [ 1] 1586 	ld	xl, a
      00087A 89               [ 2] 1587 	pushw	x
      00087B 89               [ 2] 1588 	pushw	x
      00087C 4B 40            [ 1] 1589 	push	#0x40
      00087E 4B 00            [ 1] 1590 	push	#0x00
      000880 4B 28            [ 1] 1591 	push	#0x28
      000882 4B 00            [ 1] 1592 	push	#0x00
      000884 CDr04r31         [ 4] 1593 	call	_drawGator
      000887 5B 06            [ 2] 1594 	addw	sp, #6
      000889 85               [ 2] 1595 	popw	x
                                   1596 ;	main.c: 237: drawGator(72, 64, (frame%64)<32);
      00088A 89               [ 2] 1597 	pushw	x
      00088B 89               [ 2] 1598 	pushw	x
      00088C 4B 40            [ 1] 1599 	push	#0x40
      00088E 4B 00            [ 1] 1600 	push	#0x00
      000890 4B 48            [ 1] 1601 	push	#0x48
      000892 4B 00            [ 1] 1602 	push	#0x00
      000894 CDr04r31         [ 4] 1603 	call	_drawGator
      000897 5B 06            [ 2] 1604 	addw	sp, #6
      000899 4B 40            [ 1] 1605 	push	#0x40
      00089B 4B 00            [ 1] 1606 	push	#0x00
      00089D 4B 68            [ 1] 1607 	push	#0x68
      00089F 4B 00            [ 1] 1608 	push	#0x00
      0008A1 CDr04r31         [ 4] 1609 	call	_drawGator
      0008A4 5B 06            [ 2] 1610 	addw	sp, #6
                                   1611 ;	main.c: 239: frame++;
      0008A6 1E 67            [ 2] 1612 	ldw	x, (0x67, sp)
      0008A8 5C               [ 1] 1613 	incw	x
      0008A9 1F 67            [ 2] 1614 	ldw	(0x67, sp), x
      0008AB 26 05            [ 1] 1615 	jrne	00210$
      0008AD 1E 65            [ 2] 1616 	ldw	x, (0x65, sp)
      0008AF 5C               [ 1] 1617 	incw	x
      0008B0 1F 65            [ 2] 1618 	ldw	(0x65, sp), x
      0008B2                       1619 00210$:
                                   1620 ;	main.c: 240: lx = x;
      0008B2 7B 7B            [ 1] 1621 	ld	a, (0x7b, sp)
      0008B4 6B 7D            [ 1] 1622 	ld	(0x7d, sp), a
                                   1623 ;	main.c: 241: ly = y;
      0008B6 7B 7A            [ 1] 1624 	ld	a, (0x7a, sp)
      0008B8 6B 7C            [ 1] 1625 	ld	(0x7c, sp), a
                                   1626 ;	main.c: 32: for (i = 0; i < ((F_CPU / 18000UL) * ms); i++)
      0008BA 90 5F            [ 1] 1627 	clrw	y
      0008BC 5F               [ 1] 1628 	clrw	x
      0008BD                       1629 00128$:
      0008BD 90 A3 56 B8      [ 2] 1630 	cpw	y, #0x56b8
      0008C1 9F               [ 1] 1631 	ld	a, xl
      0008C2 A2 00            [ 1] 1632 	sbc	a, #0x00
      0008C4 9E               [ 1] 1633 	ld	a, xh
      0008C5 A2 00            [ 1] 1634 	sbc	a, #0x00
      0008C7 25 03            [ 1] 1635 	jrc	00211$
      0008C9 CCr07r20         [ 2] 1636 	jp	00106$
      0008CC                       1637 00211$:
                                   1638 ;	main.c: 33: __asm__("nop");
      0008CC 9D               [ 1] 1639 	nop
                                   1640 ;	main.c: 32: for (i = 0; i < ((F_CPU / 18000UL) * ms); i++)
      0008CD 90 5C            [ 1] 1641 	incw	y
      0008CF 26 EC            [ 1] 1642 	jrne	00128$
      0008D1 5C               [ 1] 1643 	incw	x
      0008D2 20 E9            [ 2] 1644 	jra	00128$
                                   1645 ;	main.c: 244: delay_ms(200);
                                   1646 ;	main.c: 248: }
      0008D4 5B 7D            [ 2] 1647 	addw	sp, #125
      0008D6 81               [ 4] 1648 	ret
                                   1649 ;	main.c: 256: void SPI_init() {
                                   1650 ;	-----------------------------------------
                                   1651 ;	 function SPI_init
                                   1652 ;	-----------------------------------------
      0008D7                       1653 _SPI_init:
                                   1654 ;	main.c: 258: PC_DDR |= (1<<5) | (1<<6); // clock and MOSI
      0008D7 C6 50 0C         [ 1] 1655 	ld	a, 0x500c
      0008DA AA 60            [ 1] 1656 	or	a, #0x60
      0008DC C7 50 0C         [ 1] 1657 	ld	0x500c, a
                                   1658 ;	main.c: 259: PC_CR1 |= (1<<5) | (1<<6) | (1<<7);
      0008DF C6 50 0D         [ 1] 1659 	ld	a, 0x500d
      0008E2 AA E0            [ 1] 1660 	or	a, #0xe0
      0008E4 C7 50 0D         [ 1] 1661 	ld	0x500d, a
                                   1662 ;	main.c: 263: SPI_CR2 = SPI_CR2_SSM | SPI_CR2_SSI;
      0008E7 35 03 52 01      [ 1] 1663 	mov	0x5201+0, #0x03
                                   1664 ;	main.c: 264: SPI_CR1 = SPI_CR1_MSTR;// | SPI_CR1_BR(3);
      0008EB 35 04 52 00      [ 1] 1665 	mov	0x5200+0, #0x04
                                   1666 ;	main.c: 265: SPI_CR1 |= SPI_CR1_SPE;
      0008EF 72 1C 52 00      [ 1] 1667 	bset	20992, #6
                                   1668 ;	main.c: 266: }
      0008F3 81               [ 4] 1669 	ret
                                   1670 ;	main.c: 268: void SPI_write(uint8_t data) {
                                   1671 ;	-----------------------------------------
                                   1672 ;	 function SPI_write
                                   1673 ;	-----------------------------------------
      0008F4                       1674 _SPI_write:
                                   1675 ;	main.c: 269: SPI_DR = data;
      0008F4 AE 52 04         [ 2] 1676 	ldw	x, #0x5204
      0008F7 7B 03            [ 1] 1677 	ld	a, (0x03, sp)
      0008F9 F7               [ 1] 1678 	ld	(x), a
                                   1679 ;	main.c: 270: while (!(SPI_SR & SPI_SR_TXE));
      0008FA                       1680 00101$:
      0008FA C6 52 03         [ 1] 1681 	ld	a, 0x5203
      0008FD A5 02            [ 1] 1682 	bcp	a, #0x02
      0008FF 27 F9            [ 1] 1683 	jreq	00101$
                                   1684 ;	main.c: 271: }
      000901 81               [ 4] 1685 	ret
                                   1686 ;	main.c: 273: void SPI_transfer(uint8_t *data, size_t len) {
                                   1687 ;	-----------------------------------------
                                   1688 ;	 function SPI_transfer
                                   1689 ;	-----------------------------------------
      000902                       1690 _SPI_transfer:
                                   1691 ;	main.c: 274: for (size_t i=0; i< len; ++i) {
      000902 5F               [ 1] 1692 	clrw	x
      000903                       1693 00103$:
      000903 13 05            [ 2] 1694 	cpw	x, (0x05, sp)
      000905 25 01            [ 1] 1695 	jrc	00118$
      000907 81               [ 4] 1696 	ret
      000908                       1697 00118$:
                                   1698 ;	main.c: 275: SPI_write(data[i]);
      000908 90 93            [ 1] 1699 	ldw	y, x
      00090A 72 F9 03         [ 2] 1700 	addw	y, (0x03, sp)
      00090D 90 F6            [ 1] 1701 	ld	a, (y)
      00090F 89               [ 2] 1702 	pushw	x
      000910 88               [ 1] 1703 	push	a
      000911 CDr08rF4         [ 4] 1704 	call	_SPI_write
      000914 84               [ 1] 1705 	pop	a
      000915 85               [ 2] 1706 	popw	x
                                   1707 ;	main.c: 274: for (size_t i=0; i< len; ++i) {
      000916 5C               [ 1] 1708 	incw	x
      000917 20 EA            [ 2] 1709 	jra	00103$
                                   1710 ;	main.c: 277: }
      000919 81               [ 4] 1711 	ret
                                   1712 ;	main.c: 283: void ST7735_Write(uint8_t val, uint8_t cmd) {
                                   1713 ;	-----------------------------------------
                                   1714 ;	 function ST7735_Write
                                   1715 ;	-----------------------------------------
      00091A                       1716 _ST7735_Write:
                                   1717 ;	main.c: 285: PA_ODR &= ~(1 << DC_PIN);
      00091A C6 50 00         [ 1] 1718 	ld	a, 0x5000
                                   1719 ;	main.c: 284: if (cmd==CMD)
      00091D 0D 04            [ 1] 1720 	tnz	(0x04, sp)
      00091F 26 07            [ 1] 1721 	jrne	00102$
                                   1722 ;	main.c: 285: PA_ODR &= ~(1 << DC_PIN);
      000921 A4 F7            [ 1] 1723 	and	a, #0xf7
      000923 C7 50 00         [ 1] 1724 	ld	0x5000, a
      000926 20 05            [ 2] 1725 	jra	00103$
      000928                       1726 00102$:
                                   1727 ;	main.c: 287: PA_ODR |= (1 << DC_PIN);
      000928 AA 08            [ 1] 1728 	or	a, #0x08
      00092A C7 50 00         [ 1] 1729 	ld	0x5000, a
      00092D                       1730 00103$:
                                   1731 ;	main.c: 288: SPI_write(val);
      00092D 7B 03            [ 1] 1732 	ld	a, (0x03, sp)
      00092F 88               [ 1] 1733 	push	a
      000930 CDr08rF4         [ 4] 1734 	call	_SPI_write
      000933 84               [ 1] 1735 	pop	a
                                   1736 ;	main.c: 291: PA_ODR |= (1 << DC_PIN);
      000934 72 16 50 00      [ 1] 1737 	bset	20480, #3
                                   1738 ;	main.c: 292: }
      000938 81               [ 4] 1739 	ret
                                   1740 ;	main.c: 302: void ST7735_Write16(uint16_t value) {
                                   1741 ;	-----------------------------------------
                                   1742 ;	 function ST7735_Write16
                                   1743 ;	-----------------------------------------
      000939                       1744 _ST7735_Write16:
      000939 52 02            [ 2] 1745 	sub	sp, #2
                                   1746 ;	main.c: 303: ST7735_WriteData(((value & 0xFF00) >> 0x08));
      00093B 0F 02            [ 1] 1747 	clr	(0x02, sp)
      00093D 7B 05            [ 1] 1748 	ld	a, (0x05, sp)
      00093F 97               [ 1] 1749 	ld	xl, a
                                   1750 ;	main.c: 295: PA_ODR |= (1 << DC_PIN);
      000940 72 16 50 00      [ 1] 1751 	bset	20480, #3
                                   1752 ;	main.c: 296: SPI_write(val);
      000944 9F               [ 1] 1753 	ld	a, xl
      000945 88               [ 1] 1754 	push	a
      000946 CDr08rF4         [ 4] 1755 	call	_SPI_write
      000949 84               [ 1] 1756 	pop	a
                                   1757 ;	main.c: 299: PA_ODR |= (1 << DC_PIN);
      00094A 72 16 50 00      [ 1] 1758 	bset	20480, #3
                                   1759 ;	main.c: 304: ST7735_WriteData((value & 0x00FF));
      00094E 7B 06            [ 1] 1760 	ld	a, (0x06, sp)
      000950 97               [ 1] 1761 	ld	xl, a
                                   1762 ;	main.c: 295: PA_ODR |= (1 << DC_PIN);
      000951 72 16 50 00      [ 1] 1763 	bset	20480, #3
                                   1764 ;	main.c: 296: SPI_write(val);
      000955 9F               [ 1] 1765 	ld	a, xl
      000956 88               [ 1] 1766 	push	a
      000957 CDr08rF4         [ 4] 1767 	call	_SPI_write
      00095A 84               [ 1] 1768 	pop	a
                                   1769 ;	main.c: 299: PA_ODR |= (1 << DC_PIN);
      00095B 72 16 50 00      [ 1] 1770 	bset	20480, #3
                                   1771 ;	main.c: 304: ST7735_WriteData((value & 0x00FF));
                                   1772 ;	main.c: 305: }
      00095F 5B 02            [ 2] 1773 	addw	sp, #2
      000961 81               [ 4] 1774 	ret
                                   1775 ;	main.c: 307: void ST7735_SetAddrWindow(uint8_t x, uint8_t y, uint8_t w, uint8_t h) {
                                   1776 ;	-----------------------------------------
                                   1777 ;	 function ST7735_SetAddrWindow
                                   1778 ;	-----------------------------------------
      000962                       1779 _ST7735_SetAddrWindow:
      000962 52 02            [ 2] 1780 	sub	sp, #2
                                   1781 ;	main.c: 308: y += 0x18;
      000964 7B 06            [ 1] 1782 	ld	a, (0x06, sp)
      000966 AB 18            [ 1] 1783 	add	a, #0x18
      000968 6B 06            [ 1] 1784 	ld	(0x06, sp), a
                                   1785 ;	main.c: 309: w += x -1;
      00096A 7B 05            [ 1] 1786 	ld	a, (0x05, sp)
      00096C 4A               [ 1] 1787 	dec	a
      00096D 6B 02            [ 1] 1788 	ld	(0x02, sp), a
      00096F 7B 07            [ 1] 1789 	ld	a, (0x07, sp)
      000971 1B 02            [ 1] 1790 	add	a, (0x02, sp)
      000973 6B 07            [ 1] 1791 	ld	(0x07, sp), a
                                   1792 ;	main.c: 310: h += y -1;
      000975 7B 06            [ 1] 1793 	ld	a, (0x06, sp)
      000977 4A               [ 1] 1794 	dec	a
      000978 6B 01            [ 1] 1795 	ld	(0x01, sp), a
      00097A 7B 08            [ 1] 1796 	ld	a, (0x08, sp)
      00097C 1B 01            [ 1] 1797 	add	a, (0x01, sp)
      00097E 6B 08            [ 1] 1798 	ld	(0x08, sp), a
                                   1799 ;	main.c: 311: ST7735_Write(ST7735_CASET, CMD);
      000980 4B 00            [ 1] 1800 	push	#0x00
      000982 4B 2A            [ 1] 1801 	push	#0x2a
      000984 CDr09r1A         [ 4] 1802 	call	_ST7735_Write
      000987 5B 02            [ 2] 1803 	addw	sp, #2
                                   1804 ;	main.c: 312: ST7735_Write(0x00, DAT);
      000989 4B 01            [ 1] 1805 	push	#0x01
      00098B 4B 00            [ 1] 1806 	push	#0x00
      00098D CDr09r1A         [ 4] 1807 	call	_ST7735_Write
      000990 5B 02            [ 2] 1808 	addw	sp, #2
                                   1809 ;	main.c: 313: ST7735_Write(x, DAT);
      000992 4B 01            [ 1] 1810 	push	#0x01
      000994 7B 06            [ 1] 1811 	ld	a, (0x06, sp)
      000996 88               [ 1] 1812 	push	a
      000997 CDr09r1A         [ 4] 1813 	call	_ST7735_Write
      00099A 5B 02            [ 2] 1814 	addw	sp, #2
                                   1815 ;	main.c: 314: ST7735_Write(0x00, DAT);
      00099C 4B 01            [ 1] 1816 	push	#0x01
      00099E 4B 00            [ 1] 1817 	push	#0x00
      0009A0 CDr09r1A         [ 4] 1818 	call	_ST7735_Write
      0009A3 5B 02            [ 2] 1819 	addw	sp, #2
                                   1820 ;	main.c: 315: ST7735_Write(w, DAT);
      0009A5 4B 01            [ 1] 1821 	push	#0x01
      0009A7 7B 08            [ 1] 1822 	ld	a, (0x08, sp)
      0009A9 88               [ 1] 1823 	push	a
      0009AA CDr09r1A         [ 4] 1824 	call	_ST7735_Write
      0009AD 5B 02            [ 2] 1825 	addw	sp, #2
                                   1826 ;	main.c: 316: ST7735_Write(ST7735_RASET, CMD);
      0009AF 4B 00            [ 1] 1827 	push	#0x00
      0009B1 4B 2B            [ 1] 1828 	push	#0x2b
      0009B3 CDr09r1A         [ 4] 1829 	call	_ST7735_Write
      0009B6 5B 02            [ 2] 1830 	addw	sp, #2
                                   1831 ;	main.c: 317: ST7735_Write(0x00, DAT);
      0009B8 4B 01            [ 1] 1832 	push	#0x01
      0009BA 4B 00            [ 1] 1833 	push	#0x00
      0009BC CDr09r1A         [ 4] 1834 	call	_ST7735_Write
      0009BF 5B 02            [ 2] 1835 	addw	sp, #2
                                   1836 ;	main.c: 318: ST7735_Write(y, DAT);
      0009C1 4B 01            [ 1] 1837 	push	#0x01
      0009C3 7B 07            [ 1] 1838 	ld	a, (0x07, sp)
      0009C5 88               [ 1] 1839 	push	a
      0009C6 CDr09r1A         [ 4] 1840 	call	_ST7735_Write
      0009C9 5B 02            [ 2] 1841 	addw	sp, #2
                                   1842 ;	main.c: 319: ST7735_Write(0x00, DAT);
      0009CB 4B 01            [ 1] 1843 	push	#0x01
      0009CD 4B 00            [ 1] 1844 	push	#0x00
      0009CF CDr09r1A         [ 4] 1845 	call	_ST7735_Write
      0009D2 5B 02            [ 2] 1846 	addw	sp, #2
                                   1847 ;	main.c: 320: ST7735_Write(h, DAT);
      0009D4 4B 01            [ 1] 1848 	push	#0x01
      0009D6 7B 09            [ 1] 1849 	ld	a, (0x09, sp)
      0009D8 88               [ 1] 1850 	push	a
      0009D9 CDr09r1A         [ 4] 1851 	call	_ST7735_Write
      0009DC 5B 02            [ 2] 1852 	addw	sp, #2
                                   1853 ;	main.c: 321: ST7735_Write(ST7735_RAMWR, CMD);
      0009DE 4B 00            [ 1] 1854 	push	#0x00
      0009E0 4B 2C            [ 1] 1855 	push	#0x2c
      0009E2 CDr09r1A         [ 4] 1856 	call	_ST7735_Write
                                   1857 ;	main.c: 322: }
      0009E5 5B 04            [ 2] 1858 	addw	sp, #4
      0009E7 81               [ 4] 1859 	ret
                                   1860 ;	main.c: 324: void ST7735_DrawPixel(int16_t x, int16_t y, uint16_t color) {
                                   1861 ;	-----------------------------------------
                                   1862 ;	 function ST7735_DrawPixel
                                   1863 ;	-----------------------------------------
      0009E8                       1864 _ST7735_DrawPixel:
                                   1865 ;	main.c: 325: ST7735_SetAddrWindow(x,y,2,1);
      0009E8 7B 06            [ 1] 1866 	ld	a, (0x06, sp)
      0009EA 97               [ 1] 1867 	ld	xl, a
      0009EB 7B 04            [ 1] 1868 	ld	a, (0x04, sp)
      0009ED 4B 01            [ 1] 1869 	push	#0x01
      0009EF 4B 02            [ 1] 1870 	push	#0x02
      0009F1 89               [ 2] 1871 	pushw	x
      0009F2 5B 01            [ 2] 1872 	addw	sp, #1
      0009F4 88               [ 1] 1873 	push	a
      0009F5 CDr09r62         [ 4] 1874 	call	_ST7735_SetAddrWindow
      0009F8 5B 04            [ 2] 1875 	addw	sp, #4
                                   1876 ;	main.c: 326: ST7735_Write16(color);
      0009FA 1E 07            [ 2] 1877 	ldw	x, (0x07, sp)
      0009FC 89               [ 2] 1878 	pushw	x
      0009FD CDr09r39         [ 4] 1879 	call	_ST7735_Write16
      000A00 5B 02            [ 2] 1880 	addw	sp, #2
                                   1881 ;	main.c: 327: ST7735_Write16(color);
      000A02 1E 07            [ 2] 1882 	ldw	x, (0x07, sp)
      000A04 89               [ 2] 1883 	pushw	x
      000A05 CDr09r39         [ 4] 1884 	call	_ST7735_Write16
      000A08 5B 02            [ 2] 1885 	addw	sp, #2
                                   1886 ;	main.c: 328: }
      000A0A 81               [ 4] 1887 	ret
                                   1888 ;	main.c: 336: void ST7735_DrawLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color) {
                                   1889 ;	-----------------------------------------
                                   1890 ;	 function ST7735_DrawLine
                                   1891 ;	-----------------------------------------
      000A0B                       1892 _ST7735_DrawLine:
      000A0B 52 18            [ 2] 1893 	sub	sp, #24
                                   1894 ;	main.c: 337: int dx = abs(x2-x1), sx = x1<x2?1:-1;
      000A0D 1E 1F            [ 2] 1895 	ldw	x, (0x1f, sp)
      000A0F 72 F0 1B         [ 2] 1896 	subw	x, (0x1b, sp)
      000A12 5D               [ 2] 1897 	tnzw	x
      000A13 2A 05            [ 1] 1898 	jrpl	00110$
      000A15 50               [ 2] 1899 	negw	x
      000A16 1F 09            [ 2] 1900 	ldw	(0x09, sp), x
      000A18 20 02            [ 2] 1901 	jra	00111$
      000A1A                       1902 00110$:
      000A1A 1F 09            [ 2] 1903 	ldw	(0x09, sp), x
      000A1C                       1904 00111$:
      000A1C 16 09            [ 2] 1905 	ldw	y, (0x09, sp)
      000A1E 17 17            [ 2] 1906 	ldw	(0x17, sp), y
      000A20 1E 1B            [ 2] 1907 	ldw	x, (0x1b, sp)
      000A22 13 1F            [ 2] 1908 	cpw	x, (0x1f, sp)
      000A24 2E 04            [ 1] 1909 	jrsge	00119$
      000A26 5F               [ 1] 1910 	clrw	x
      000A27 5C               [ 1] 1911 	incw	x
      000A28 20 02            [ 2] 1912 	jra	00120$
      000A2A                       1913 00119$:
      000A2A 5F               [ 1] 1914 	clrw	x
      000A2B 5A               [ 2] 1915 	decw	x
      000A2C                       1916 00120$:
      000A2C 1F 15            [ 2] 1917 	ldw	(0x15, sp), x
                                   1918 ;	main.c: 338: int dy = abs(y2-y1), sy = y1<y2?1:-1;
      000A2E 1E 21            [ 2] 1919 	ldw	x, (0x21, sp)
      000A30 72 F0 1D         [ 2] 1920 	subw	x, (0x1d, sp)
      000A33 5D               [ 2] 1921 	tnzw	x
      000A34 2A 05            [ 1] 1922 	jrpl	00113$
      000A36 50               [ 2] 1923 	negw	x
      000A37 1F 07            [ 2] 1924 	ldw	(0x07, sp), x
      000A39 20 02            [ 2] 1925 	jra	00114$
      000A3B                       1926 00113$:
      000A3B 1F 07            [ 2] 1927 	ldw	(0x07, sp), x
      000A3D                       1928 00114$:
      000A3D 16 07            [ 2] 1929 	ldw	y, (0x07, sp)
      000A3F 17 13            [ 2] 1930 	ldw	(0x13, sp), y
      000A41 1E 1D            [ 2] 1931 	ldw	x, (0x1d, sp)
      000A43 13 21            [ 2] 1932 	cpw	x, (0x21, sp)
      000A45 2E 04            [ 1] 1933 	jrsge	00121$
      000A47 5F               [ 1] 1934 	clrw	x
      000A48 5C               [ 1] 1935 	incw	x
      000A49 20 02            [ 2] 1936 	jra	00122$
      000A4B                       1937 00121$:
      000A4B 5F               [ 1] 1938 	clrw	x
      000A4C 5A               [ 2] 1939 	decw	x
      000A4D                       1940 00122$:
      000A4D 1F 11            [ 2] 1941 	ldw	(0x11, sp), x
                                   1942 ;	main.c: 340: int err = (dx>dy?dx:-dy)/2, e2;
      000A4F 1E 17            [ 2] 1943 	ldw	x, (0x17, sp)
      000A51 13 13            [ 2] 1944 	cpw	x, (0x13, sp)
      000A53 2D 06            [ 1] 1945 	jrsle	00123$
      000A55 16 17            [ 2] 1946 	ldw	y, (0x17, sp)
      000A57 17 05            [ 2] 1947 	ldw	(0x05, sp), y
      000A59 20 05            [ 2] 1948 	jra	00124$
      000A5B                       1949 00123$:
      000A5B 1E 13            [ 2] 1950 	ldw	x, (0x13, sp)
      000A5D 50               [ 2] 1951 	negw	x
      000A5E 1F 05            [ 2] 1952 	ldw	(0x05, sp), x
      000A60                       1953 00124$:
      000A60 4B 02            [ 1] 1954 	push	#0x02
      000A62 4B 00            [ 1] 1955 	push	#0x00
      000A64 1E 07            [ 2] 1956 	ldw	x, (0x07, sp)
      000A66 89               [ 2] 1957 	pushw	x
      000A67 CDr00r00         [ 4] 1958 	call	__divsint
      000A6A 5B 04            [ 2] 1959 	addw	sp, #4
      000A6C 1F 0F            [ 2] 1960 	ldw	(0x0f, sp), x
                                   1961 ;	main.c: 341: int x=x1, y=y1;
      000A6E 16 1B            [ 2] 1962 	ldw	y, (0x1b, sp)
      000A70 17 0D            [ 2] 1963 	ldw	(0x0d, sp), y
      000A72 16 1D            [ 2] 1964 	ldw	y, (0x1d, sp)
      000A74 17 0B            [ 2] 1965 	ldw	(0x0b, sp), y
      000A76 7B 18            [ 1] 1966 	ld	a, (0x18, sp)
      000A78 40               [ 1] 1967 	neg	a
      000A79 6B 04            [ 1] 1968 	ld	(0x04, sp), a
      000A7B 4F               [ 1] 1969 	clr	a
      000A7C 12 17            [ 1] 1970 	sbc	a, (0x17, sp)
      000A7E 6B 03            [ 1] 1971 	ld	(0x03, sp), a
      000A80                       1972 00115$:
                                   1973 ;	main.c: 343: ST7735_DrawPixel(x, y, (y<6)?RGB(17,72,0):color);
      000A80 1E 0B            [ 2] 1974 	ldw	x, (0x0b, sp)
      000A82 A3 00 06         [ 2] 1975 	cpw	x, #0x0006
      000A85 2E 07            [ 1] 1976 	jrsge	00125$
      000A87 AE 12 40         [ 2] 1977 	ldw	x, #0x1240
      000A8A 1F 01            [ 2] 1978 	ldw	(0x01, sp), x
      000A8C 20 04            [ 2] 1979 	jra	00126$
      000A8E                       1980 00125$:
      000A8E 16 23            [ 2] 1981 	ldw	y, (0x23, sp)
      000A90 17 01            [ 2] 1982 	ldw	(0x01, sp), y
      000A92                       1983 00126$:
      000A92 1E 01            [ 2] 1984 	ldw	x, (0x01, sp)
      000A94 89               [ 2] 1985 	pushw	x
      000A95 1E 0D            [ 2] 1986 	ldw	x, (0x0d, sp)
      000A97 89               [ 2] 1987 	pushw	x
      000A98 1E 11            [ 2] 1988 	ldw	x, (0x11, sp)
      000A9A 89               [ 2] 1989 	pushw	x
      000A9B CDr09rE8         [ 4] 1990 	call	_ST7735_DrawPixel
      000A9E 5B 06            [ 2] 1991 	addw	sp, #6
                                   1992 ;	main.c: 344: if (x==x2 && y==y2) break;
      000AA0 1E 0D            [ 2] 1993 	ldw	x, (0x0d, sp)
      000AA2 13 1F            [ 2] 1994 	cpw	x, (0x1f, sp)
      000AA4 26 06            [ 1] 1995 	jrne	00102$
      000AA6 1E 0B            [ 2] 1996 	ldw	x, (0x0b, sp)
      000AA8 13 21            [ 2] 1997 	cpw	x, (0x21, sp)
      000AAA 27 2B            [ 1] 1998 	jreq	00117$
      000AAC                       1999 00102$:
                                   2000 ;	main.c: 345: e2 = err;
      000AAC 16 0F            [ 2] 2001 	ldw	y, (0x0f, sp)
                                   2002 ;	main.c: 346: if (e2 >-dx) { err -= dy; x += sx; }
      000AAE 1E 0F            [ 2] 2003 	ldw	x, (0x0f, sp)
      000AB0 13 03            [ 2] 2004 	cpw	x, (0x03, sp)
      000AB2 2D 0E            [ 1] 2005 	jrsle	00105$
      000AB4 1E 0F            [ 2] 2006 	ldw	x, (0x0f, sp)
      000AB6 72 F0 13         [ 2] 2007 	subw	x, (0x13, sp)
      000AB9 1F 0F            [ 2] 2008 	ldw	(0x0f, sp), x
      000ABB 1E 0D            [ 2] 2009 	ldw	x, (0x0d, sp)
      000ABD 72 FB 15         [ 2] 2010 	addw	x, (0x15, sp)
      000AC0 1F 0D            [ 2] 2011 	ldw	(0x0d, sp), x
      000AC2                       2012 00105$:
                                   2013 ;	main.c: 347: if (e2 < dy) { err += dx; y += sy; }
      000AC2 93               [ 1] 2014 	ldw	x, y
      000AC3 13 13            [ 2] 2015 	cpw	x, (0x13, sp)
      000AC5 2E B9            [ 1] 2016 	jrsge	00115$
      000AC7 1E 0F            [ 2] 2017 	ldw	x, (0x0f, sp)
      000AC9 72 FB 17         [ 2] 2018 	addw	x, (0x17, sp)
      000ACC 1F 0F            [ 2] 2019 	ldw	(0x0f, sp), x
      000ACE 1E 0B            [ 2] 2020 	ldw	x, (0x0b, sp)
      000AD0 72 FB 11         [ 2] 2021 	addw	x, (0x11, sp)
      000AD3 1F 0B            [ 2] 2022 	ldw	(0x0b, sp), x
      000AD5 20 A9            [ 2] 2023 	jra	00115$
      000AD7                       2024 00117$:
                                   2025 ;	main.c: 349: }
      000AD7 5B 18            [ 2] 2026 	addw	sp, #24
      000AD9 81               [ 4] 2027 	ret
                                   2028 ;	main.c: 351: void ST7735_Init() {
                                   2029 ;	-----------------------------------------
                                   2030 ;	 function ST7735_Init
                                   2031 ;	-----------------------------------------
      000ADA                       2032 _ST7735_Init:
                                   2033 ;	main.c: 353: PA_DDR |= (1 << DC_PIN);
      000ADA 72 16 50 02      [ 1] 2034 	bset	20482, #3
                                   2035 ;	main.c: 354: PA_CR1 |= (1 << DC_PIN);
      000ADE 72 16 50 03      [ 1] 2036 	bset	20483, #3
                                   2037 ;	main.c: 355: PA_ODR |= (1 << DC_PIN);
      000AE2 72 16 50 00      [ 1] 2038 	bset	20480, #3
                                   2039 ;	main.c: 357: PD_DDR |= (1 << RST_PIN);
      000AE6 72 1C 50 11      [ 1] 2040 	bset	20497, #6
                                   2041 ;	main.c: 358: PD_CR1 |= (1 << RST_PIN);
      000AEA 72 1C 50 12      [ 1] 2042 	bset	20498, #6
                                   2043 ;	main.c: 359: PD_ODR &= ~(1 << RST_PIN);
      000AEE C6 50 0F         [ 1] 2044 	ld	a, 0x500f
      000AF1 A4 BF            [ 1] 2045 	and	a, #0xbf
      000AF3 C7 50 0F         [ 1] 2046 	ld	0x500f, a
                                   2047 ;	main.c: 361: SPI_init();
      000AF6 CDr08rD7         [ 4] 2048 	call	_SPI_init
                                   2049 ;	main.c: 32: for (i = 0; i < ((F_CPU / 18000UL) * ms); i++)
      000AF9 90 5F            [ 1] 2050 	clrw	y
      000AFB 5F               [ 1] 2051 	clrw	x
      000AFC                       2052 00116$:
      000AFC 90 A3 2B 5C      [ 2] 2053 	cpw	y, #0x2b5c
      000B00 9F               [ 1] 2054 	ld	a, xl
      000B01 A2 00            [ 1] 2055 	sbc	a, #0x00
      000B03 9E               [ 1] 2056 	ld	a, xh
      000B04 A2 00            [ 1] 2057 	sbc	a, #0x00
      000B06 24 08            [ 1] 2058 	jrnc	00102$
                                   2059 ;	main.c: 33: __asm__("nop");
      000B08 9D               [ 1] 2060 	nop
                                   2061 ;	main.c: 32: for (i = 0; i < ((F_CPU / 18000UL) * ms); i++)
      000B09 90 5C            [ 1] 2062 	incw	y
      000B0B 26 EF            [ 1] 2063 	jrne	00116$
      000B0D 5C               [ 1] 2064 	incw	x
      000B0E 20 EC            [ 2] 2065 	jra	00116$
                                   2066 ;	main.c: 362: delay_ms(100);
      000B10                       2067 00102$:
                                   2068 ;	main.c: 364: PD_ODR |= (1 << RST_PIN);
      000B10 C6 50 0F         [ 1] 2069 	ld	a, 0x500f
      000B13 AA 40            [ 1] 2070 	or	a, #0x40
      000B15 C7 50 0F         [ 1] 2071 	ld	0x500f, a
                                   2072 ;	main.c: 32: for (i = 0; i < ((F_CPU / 18000UL) * ms); i++)
      000B18 90 5F            [ 1] 2073 	clrw	y
      000B1A 5F               [ 1] 2074 	clrw	x
      000B1B                       2075 00119$:
      000B1B 90 A3 2B 5C      [ 2] 2076 	cpw	y, #0x2b5c
      000B1F 9F               [ 1] 2077 	ld	a, xl
      000B20 A2 00            [ 1] 2078 	sbc	a, #0x00
      000B22 9E               [ 1] 2079 	ld	a, xh
      000B23 A2 00            [ 1] 2080 	sbc	a, #0x00
      000B25 24 08            [ 1] 2081 	jrnc	00104$
                                   2082 ;	main.c: 33: __asm__("nop");
      000B27 9D               [ 1] 2083 	nop
                                   2084 ;	main.c: 32: for (i = 0; i < ((F_CPU / 18000UL) * ms); i++)
      000B28 90 5C            [ 1] 2085 	incw	y
      000B2A 26 EF            [ 1] 2086 	jrne	00119$
      000B2C 5C               [ 1] 2087 	incw	x
      000B2D 20 EC            [ 2] 2088 	jra	00119$
                                   2089 ;	main.c: 365: delay_ms(100);
      000B2F                       2090 00104$:
                                   2091 ;	main.c: 367: ST7735_Write(ST7735_SWRESET, CMD);
      000B2F 4B 00            [ 1] 2092 	push	#0x00
      000B31 4B 01            [ 1] 2093 	push	#0x01
      000B33 CDr09r1A         [ 4] 2094 	call	_ST7735_Write
      000B36 5B 02            [ 2] 2095 	addw	sp, #2
                                   2096 ;	main.c: 32: for (i = 0; i < ((F_CPU / 18000UL) * ms); i++)
      000B38 90 5F            [ 1] 2097 	clrw	y
      000B3A 5F               [ 1] 2098 	clrw	x
      000B3B                       2099 00122$:
      000B3B 90 A3 41 0A      [ 2] 2100 	cpw	y, #0x410a
      000B3F 9F               [ 1] 2101 	ld	a, xl
      000B40 A2 00            [ 1] 2102 	sbc	a, #0x00
      000B42 9E               [ 1] 2103 	ld	a, xh
      000B43 A2 00            [ 1] 2104 	sbc	a, #0x00
      000B45 24 08            [ 1] 2105 	jrnc	00106$
                                   2106 ;	main.c: 33: __asm__("nop");
      000B47 9D               [ 1] 2107 	nop
                                   2108 ;	main.c: 32: for (i = 0; i < ((F_CPU / 18000UL) * ms); i++)
      000B48 90 5C            [ 1] 2109 	incw	y
      000B4A 26 EF            [ 1] 2110 	jrne	00122$
      000B4C 5C               [ 1] 2111 	incw	x
      000B4D 20 EC            [ 2] 2112 	jra	00122$
                                   2113 ;	main.c: 368: delay_ms(150);
      000B4F                       2114 00106$:
                                   2115 ;	main.c: 369: ST7735_Write(ST7735_SLPOUT, CMD);
      000B4F 4B 00            [ 1] 2116 	push	#0x00
      000B51 4B 11            [ 1] 2117 	push	#0x11
      000B53 CDr09r1A         [ 4] 2118 	call	_ST7735_Write
      000B56 5B 02            [ 2] 2119 	addw	sp, #2
                                   2120 ;	main.c: 32: for (i = 0; i < ((F_CPU / 18000UL) * ms); i++)
      000B58 90 5F            [ 1] 2121 	clrw	y
      000B5A 5F               [ 1] 2122 	clrw	x
      000B5B                       2123 00125$:
      000B5B 90 A3 D8 CC      [ 2] 2124 	cpw	y, #0xd8cc
      000B5F 9F               [ 1] 2125 	ld	a, xl
      000B60 A2 00            [ 1] 2126 	sbc	a, #0x00
      000B62 9E               [ 1] 2127 	ld	a, xh
      000B63 A2 00            [ 1] 2128 	sbc	a, #0x00
      000B65 24 08            [ 1] 2129 	jrnc	00108$
                                   2130 ;	main.c: 33: __asm__("nop");
      000B67 9D               [ 1] 2131 	nop
                                   2132 ;	main.c: 32: for (i = 0; i < ((F_CPU / 18000UL) * ms); i++)
      000B68 90 5C            [ 1] 2133 	incw	y
      000B6A 26 EF            [ 1] 2134 	jrne	00125$
      000B6C 5C               [ 1] 2135 	incw	x
      000B6D 20 EC            [ 2] 2136 	jra	00125$
                                   2137 ;	main.c: 370: delay_ms(500);
      000B6F                       2138 00108$:
                                   2139 ;	main.c: 371: ST7735_Write(ST7735_FRMCTR1, CMD);
      000B6F 4B 00            [ 1] 2140 	push	#0x00
      000B71 4B B1            [ 1] 2141 	push	#0xb1
      000B73 CDr09r1A         [ 4] 2142 	call	_ST7735_Write
      000B76 5B 02            [ 2] 2143 	addw	sp, #2
                                   2144 ;	main.c: 372: ST7735_Write(0x01, DAT);
      000B78 4B 01            [ 1] 2145 	push	#0x01
      000B7A 4B 01            [ 1] 2146 	push	#0x01
      000B7C CDr09r1A         [ 4] 2147 	call	_ST7735_Write
      000B7F 5B 02            [ 2] 2148 	addw	sp, #2
                                   2149 ;	main.c: 373: ST7735_Write(0x2C, DAT);
      000B81 4B 01            [ 1] 2150 	push	#0x01
      000B83 4B 2C            [ 1] 2151 	push	#0x2c
      000B85 CDr09r1A         [ 4] 2152 	call	_ST7735_Write
      000B88 5B 02            [ 2] 2153 	addw	sp, #2
                                   2154 ;	main.c: 374: ST7735_Write(0x2D, DAT);
      000B8A 4B 01            [ 1] 2155 	push	#0x01
      000B8C 4B 2D            [ 1] 2156 	push	#0x2d
      000B8E CDr09r1A         [ 4] 2157 	call	_ST7735_Write
      000B91 5B 02            [ 2] 2158 	addw	sp, #2
                                   2159 ;	main.c: 375: ST7735_Write(ST7735_FRMCTR2, CMD);
      000B93 4B 00            [ 1] 2160 	push	#0x00
      000B95 4B B2            [ 1] 2161 	push	#0xb2
      000B97 CDr09r1A         [ 4] 2162 	call	_ST7735_Write
      000B9A 5B 02            [ 2] 2163 	addw	sp, #2
                                   2164 ;	main.c: 376: ST7735_Write(0x01, DAT);
      000B9C 4B 01            [ 1] 2165 	push	#0x01
      000B9E 4B 01            [ 1] 2166 	push	#0x01
      000BA0 CDr09r1A         [ 4] 2167 	call	_ST7735_Write
      000BA3 5B 02            [ 2] 2168 	addw	sp, #2
                                   2169 ;	main.c: 377: ST7735_Write(0x2C, DAT);
      000BA5 4B 01            [ 1] 2170 	push	#0x01
      000BA7 4B 2C            [ 1] 2171 	push	#0x2c
      000BA9 CDr09r1A         [ 4] 2172 	call	_ST7735_Write
      000BAC 5B 02            [ 2] 2173 	addw	sp, #2
                                   2174 ;	main.c: 378: ST7735_Write(0x2D, DAT);
      000BAE 4B 01            [ 1] 2175 	push	#0x01
      000BB0 4B 2D            [ 1] 2176 	push	#0x2d
      000BB2 CDr09r1A         [ 4] 2177 	call	_ST7735_Write
      000BB5 5B 02            [ 2] 2178 	addw	sp, #2
                                   2179 ;	main.c: 379: ST7735_Write(ST7735_FRMCTR3, CMD);
      000BB7 4B 00            [ 1] 2180 	push	#0x00
      000BB9 4B B3            [ 1] 2181 	push	#0xb3
      000BBB CDr09r1A         [ 4] 2182 	call	_ST7735_Write
      000BBE 5B 02            [ 2] 2183 	addw	sp, #2
                                   2184 ;	main.c: 380: ST7735_Write(0x01, DAT);
      000BC0 4B 01            [ 1] 2185 	push	#0x01
      000BC2 4B 01            [ 1] 2186 	push	#0x01
      000BC4 CDr09r1A         [ 4] 2187 	call	_ST7735_Write
      000BC7 5B 02            [ 2] 2188 	addw	sp, #2
                                   2189 ;	main.c: 381: ST7735_Write(0x2C, DAT);
      000BC9 4B 01            [ 1] 2190 	push	#0x01
      000BCB 4B 2C            [ 1] 2191 	push	#0x2c
      000BCD CDr09r1A         [ 4] 2192 	call	_ST7735_Write
      000BD0 5B 02            [ 2] 2193 	addw	sp, #2
                                   2194 ;	main.c: 382: ST7735_Write(0x2D, DAT);
      000BD2 4B 01            [ 1] 2195 	push	#0x01
      000BD4 4B 2D            [ 1] 2196 	push	#0x2d
      000BD6 CDr09r1A         [ 4] 2197 	call	_ST7735_Write
      000BD9 5B 02            [ 2] 2198 	addw	sp, #2
                                   2199 ;	main.c: 383: ST7735_Write(0x01, DAT);
      000BDB 4B 01            [ 1] 2200 	push	#0x01
      000BDD 4B 01            [ 1] 2201 	push	#0x01
      000BDF CDr09r1A         [ 4] 2202 	call	_ST7735_Write
      000BE2 5B 02            [ 2] 2203 	addw	sp, #2
                                   2204 ;	main.c: 384: ST7735_Write(0x2C, DAT);
      000BE4 4B 01            [ 1] 2205 	push	#0x01
      000BE6 4B 2C            [ 1] 2206 	push	#0x2c
      000BE8 CDr09r1A         [ 4] 2207 	call	_ST7735_Write
      000BEB 5B 02            [ 2] 2208 	addw	sp, #2
                                   2209 ;	main.c: 385: ST7735_Write(0x2D, DAT);
      000BED 4B 01            [ 1] 2210 	push	#0x01
      000BEF 4B 2D            [ 1] 2211 	push	#0x2d
      000BF1 CDr09r1A         [ 4] 2212 	call	_ST7735_Write
      000BF4 5B 02            [ 2] 2213 	addw	sp, #2
                                   2214 ;	main.c: 386: ST7735_Write(ST7735_INVCTR, CMD);
      000BF6 4B 00            [ 1] 2215 	push	#0x00
      000BF8 4B B4            [ 1] 2216 	push	#0xb4
      000BFA CDr09r1A         [ 4] 2217 	call	_ST7735_Write
      000BFD 5B 02            [ 2] 2218 	addw	sp, #2
                                   2219 ;	main.c: 387: ST7735_Write(0x07, DAT);
      000BFF 4B 01            [ 1] 2220 	push	#0x01
      000C01 4B 07            [ 1] 2221 	push	#0x07
      000C03 CDr09r1A         [ 4] 2222 	call	_ST7735_Write
      000C06 5B 02            [ 2] 2223 	addw	sp, #2
                                   2224 ;	main.c: 388: ST7735_Write(ST7735_PWCTR1, CMD);
      000C08 4B 00            [ 1] 2225 	push	#0x00
      000C0A 4B C0            [ 1] 2226 	push	#0xc0
      000C0C CDr09r1A         [ 4] 2227 	call	_ST7735_Write
      000C0F 5B 02            [ 2] 2228 	addw	sp, #2
                                   2229 ;	main.c: 389: ST7735_Write(0xA2, DAT);
      000C11 4B 01            [ 1] 2230 	push	#0x01
      000C13 4B A2            [ 1] 2231 	push	#0xa2
      000C15 CDr09r1A         [ 4] 2232 	call	_ST7735_Write
      000C18 5B 02            [ 2] 2233 	addw	sp, #2
                                   2234 ;	main.c: 390: ST7735_Write(0x02, DAT);
      000C1A 4B 01            [ 1] 2235 	push	#0x01
      000C1C 4B 02            [ 1] 2236 	push	#0x02
      000C1E CDr09r1A         [ 4] 2237 	call	_ST7735_Write
      000C21 5B 02            [ 2] 2238 	addw	sp, #2
                                   2239 ;	main.c: 391: ST7735_Write(0x84, DAT);
      000C23 4B 01            [ 1] 2240 	push	#0x01
      000C25 4B 84            [ 1] 2241 	push	#0x84
      000C27 CDr09r1A         [ 4] 2242 	call	_ST7735_Write
      000C2A 5B 02            [ 2] 2243 	addw	sp, #2
                                   2244 ;	main.c: 392: ST7735_Write(ST7735_PWCTR2, CMD);
      000C2C 4B 00            [ 1] 2245 	push	#0x00
      000C2E 4B C1            [ 1] 2246 	push	#0xc1
      000C30 CDr09r1A         [ 4] 2247 	call	_ST7735_Write
      000C33 5B 02            [ 2] 2248 	addw	sp, #2
                                   2249 ;	main.c: 393: ST7735_Write(0xC5, DAT);
      000C35 4B 01            [ 1] 2250 	push	#0x01
      000C37 4B C5            [ 1] 2251 	push	#0xc5
      000C39 CDr09r1A         [ 4] 2252 	call	_ST7735_Write
      000C3C 5B 02            [ 2] 2253 	addw	sp, #2
                                   2254 ;	main.c: 394: ST7735_Write(ST7735_PWCTR3, CMD);
      000C3E 4B 00            [ 1] 2255 	push	#0x00
      000C40 4B C2            [ 1] 2256 	push	#0xc2
      000C42 CDr09r1A         [ 4] 2257 	call	_ST7735_Write
      000C45 5B 02            [ 2] 2258 	addw	sp, #2
                                   2259 ;	main.c: 395: ST7735_Write(0x0A, DAT);
      000C47 4B 01            [ 1] 2260 	push	#0x01
      000C49 4B 0A            [ 1] 2261 	push	#0x0a
      000C4B CDr09r1A         [ 4] 2262 	call	_ST7735_Write
      000C4E 5B 02            [ 2] 2263 	addw	sp, #2
                                   2264 ;	main.c: 396: ST7735_Write(0x00, DAT);
      000C50 4B 01            [ 1] 2265 	push	#0x01
      000C52 4B 00            [ 1] 2266 	push	#0x00
      000C54 CDr09r1A         [ 4] 2267 	call	_ST7735_Write
      000C57 5B 02            [ 2] 2268 	addw	sp, #2
                                   2269 ;	main.c: 397: ST7735_Write(ST7735_PWCTR4, CMD);
      000C59 4B 00            [ 1] 2270 	push	#0x00
      000C5B 4B C3            [ 1] 2271 	push	#0xc3
      000C5D CDr09r1A         [ 4] 2272 	call	_ST7735_Write
      000C60 5B 02            [ 2] 2273 	addw	sp, #2
                                   2274 ;	main.c: 398: ST7735_Write(0x8A, DAT);
      000C62 4B 01            [ 1] 2275 	push	#0x01
      000C64 4B 8A            [ 1] 2276 	push	#0x8a
      000C66 CDr09r1A         [ 4] 2277 	call	_ST7735_Write
      000C69 5B 02            [ 2] 2278 	addw	sp, #2
                                   2279 ;	main.c: 399: ST7735_Write(0x2A, DAT);
      000C6B 4B 01            [ 1] 2280 	push	#0x01
      000C6D 4B 2A            [ 1] 2281 	push	#0x2a
      000C6F CDr09r1A         [ 4] 2282 	call	_ST7735_Write
      000C72 5B 02            [ 2] 2283 	addw	sp, #2
                                   2284 ;	main.c: 400: ST7735_Write(ST7735_PWCTR5, CMD);
      000C74 4B 00            [ 1] 2285 	push	#0x00
      000C76 4B C4            [ 1] 2286 	push	#0xc4
      000C78 CDr09r1A         [ 4] 2287 	call	_ST7735_Write
      000C7B 5B 02            [ 2] 2288 	addw	sp, #2
                                   2289 ;	main.c: 401: ST7735_Write(0x8A, DAT);
      000C7D 4B 01            [ 1] 2290 	push	#0x01
      000C7F 4B 8A            [ 1] 2291 	push	#0x8a
      000C81 CDr09r1A         [ 4] 2292 	call	_ST7735_Write
      000C84 5B 02            [ 2] 2293 	addw	sp, #2
                                   2294 ;	main.c: 402: ST7735_Write(0xEE, DAT);
      000C86 4B 01            [ 1] 2295 	push	#0x01
      000C88 4B EE            [ 1] 2296 	push	#0xee
      000C8A CDr09r1A         [ 4] 2297 	call	_ST7735_Write
      000C8D 5B 02            [ 2] 2298 	addw	sp, #2
                                   2299 ;	main.c: 403: ST7735_Write(ST7735_VMCTR1, CMD);
      000C8F 4B 00            [ 1] 2300 	push	#0x00
      000C91 4B C5            [ 1] 2301 	push	#0xc5
      000C93 CDr09r1A         [ 4] 2302 	call	_ST7735_Write
      000C96 5B 02            [ 2] 2303 	addw	sp, #2
                                   2304 ;	main.c: 404: ST7735_Write(0x0E, DAT);
      000C98 4B 01            [ 1] 2305 	push	#0x01
      000C9A 4B 0E            [ 1] 2306 	push	#0x0e
      000C9C CDr09r1A         [ 4] 2307 	call	_ST7735_Write
      000C9F 5B 02            [ 2] 2308 	addw	sp, #2
                                   2309 ;	main.c: 405: ST7735_Write(ST7735_INVOFF, CMD);
      000CA1 4B 00            [ 1] 2310 	push	#0x00
      000CA3 4B 20            [ 1] 2311 	push	#0x20
      000CA5 CDr09r1A         [ 4] 2312 	call	_ST7735_Write
      000CA8 5B 02            [ 2] 2313 	addw	sp, #2
                                   2314 ;	main.c: 406: ST7735_Write(ST7735_MADCTL, CMD);
      000CAA 4B 00            [ 1] 2315 	push	#0x00
      000CAC 4B 36            [ 1] 2316 	push	#0x36
      000CAE CDr09r1A         [ 4] 2317 	call	_ST7735_Write
      000CB1 5B 02            [ 2] 2318 	addw	sp, #2
                                   2319 ;	main.c: 407: ST7735_Write(0xC8, DAT);
      000CB3 4B 01            [ 1] 2320 	push	#0x01
      000CB5 4B C8            [ 1] 2321 	push	#0xc8
      000CB7 CDr09r1A         [ 4] 2322 	call	_ST7735_Write
      000CBA 5B 02            [ 2] 2323 	addw	sp, #2
                                   2324 ;	main.c: 408: ST7735_Write(ST7735_COLMOD, CMD);
      000CBC 4B 00            [ 1] 2325 	push	#0x00
      000CBE 4B 3A            [ 1] 2326 	push	#0x3a
      000CC0 CDr09r1A         [ 4] 2327 	call	_ST7735_Write
      000CC3 5B 02            [ 2] 2328 	addw	sp, #2
                                   2329 ;	main.c: 409: ST7735_Write(0x05, DAT);
      000CC5 4B 01            [ 1] 2330 	push	#0x01
      000CC7 4B 05            [ 1] 2331 	push	#0x05
      000CC9 CDr09r1A         [ 4] 2332 	call	_ST7735_Write
      000CCC 5B 02            [ 2] 2333 	addw	sp, #2
                                   2334 ;	main.c: 413: ST7735_Write(ST7735_CASET, CMD);
      000CCE 4B 00            [ 1] 2335 	push	#0x00
      000CD0 4B 2A            [ 1] 2336 	push	#0x2a
      000CD2 CDr09r1A         [ 4] 2337 	call	_ST7735_Write
      000CD5 5B 02            [ 2] 2338 	addw	sp, #2
                                   2339 ;	main.c: 414: ST7735_Write(0x00, DAT);
      000CD7 4B 01            [ 1] 2340 	push	#0x01
      000CD9 4B 00            [ 1] 2341 	push	#0x00
      000CDB CDr09r1A         [ 4] 2342 	call	_ST7735_Write
      000CDE 5B 02            [ 2] 2343 	addw	sp, #2
                                   2344 ;	main.c: 415: ST7735_Write(0x00, DAT);
      000CE0 4B 01            [ 1] 2345 	push	#0x01
      000CE2 4B 00            [ 1] 2346 	push	#0x00
      000CE4 CDr09r1A         [ 4] 2347 	call	_ST7735_Write
      000CE7 5B 02            [ 2] 2348 	addw	sp, #2
                                   2349 ;	main.c: 416: ST7735_Write(0x00, DAT);
      000CE9 4B 01            [ 1] 2350 	push	#0x01
      000CEB 4B 00            [ 1] 2351 	push	#0x00
      000CED CDr09r1A         [ 4] 2352 	call	_ST7735_Write
      000CF0 5B 02            [ 2] 2353 	addw	sp, #2
                                   2354 ;	main.c: 417: ST7735_Write(0x4F, DAT);
      000CF2 4B 01            [ 1] 2355 	push	#0x01
      000CF4 4B 4F            [ 1] 2356 	push	#0x4f
      000CF6 CDr09r1A         [ 4] 2357 	call	_ST7735_Write
      000CF9 5B 02            [ 2] 2358 	addw	sp, #2
                                   2359 ;	main.c: 418: ST7735_Write(ST7735_RASET, CMD);
      000CFB 4B 00            [ 1] 2360 	push	#0x00
      000CFD 4B 2B            [ 1] 2361 	push	#0x2b
      000CFF CDr09r1A         [ 4] 2362 	call	_ST7735_Write
      000D02 5B 02            [ 2] 2363 	addw	sp, #2
                                   2364 ;	main.c: 419: ST7735_Write(0x00, DAT);
      000D04 4B 01            [ 1] 2365 	push	#0x01
      000D06 4B 00            [ 1] 2366 	push	#0x00
      000D08 CDr09r1A         [ 4] 2367 	call	_ST7735_Write
      000D0B 5B 02            [ 2] 2368 	addw	sp, #2
                                   2369 ;	main.c: 420: ST7735_Write(0x00, DAT);
      000D0D 4B 01            [ 1] 2370 	push	#0x01
      000D0F 4B 00            [ 1] 2371 	push	#0x00
      000D11 CDr09r1A         [ 4] 2372 	call	_ST7735_Write
      000D14 5B 02            [ 2] 2373 	addw	sp, #2
                                   2374 ;	main.c: 421: ST7735_Write(0x00, DAT);
      000D16 4B 01            [ 1] 2375 	push	#0x01
      000D18 4B 00            [ 1] 2376 	push	#0x00
      000D1A CDr09r1A         [ 4] 2377 	call	_ST7735_Write
      000D1D 5B 02            [ 2] 2378 	addw	sp, #2
                                   2379 ;	main.c: 422: ST7735_Write(0x9F, DAT);
      000D1F 4B 01            [ 1] 2380 	push	#0x01
      000D21 4B 9F            [ 1] 2381 	push	#0x9f
      000D23 CDr09r1A         [ 4] 2382 	call	_ST7735_Write
      000D26 5B 02            [ 2] 2383 	addw	sp, #2
                                   2384 ;	main.c: 426: ST7735_Write(ST7735_GMCTRP1, CMD);
      000D28 4B 00            [ 1] 2385 	push	#0x00
      000D2A 4B E0            [ 1] 2386 	push	#0xe0
      000D2C CDr09r1A         [ 4] 2387 	call	_ST7735_Write
      000D2F 5B 02            [ 2] 2388 	addw	sp, #2
                                   2389 ;	main.c: 427: ST7735_Write(0x02, DAT);
      000D31 4B 01            [ 1] 2390 	push	#0x01
      000D33 4B 02            [ 1] 2391 	push	#0x02
      000D35 CDr09r1A         [ 4] 2392 	call	_ST7735_Write
      000D38 5B 02            [ 2] 2393 	addw	sp, #2
                                   2394 ;	main.c: 428: ST7735_Write(0x1C, DAT);
      000D3A 4B 01            [ 1] 2395 	push	#0x01
      000D3C 4B 1C            [ 1] 2396 	push	#0x1c
      000D3E CDr09r1A         [ 4] 2397 	call	_ST7735_Write
      000D41 5B 02            [ 2] 2398 	addw	sp, #2
                                   2399 ;	main.c: 429: ST7735_Write(0x07, DAT);
      000D43 4B 01            [ 1] 2400 	push	#0x01
      000D45 4B 07            [ 1] 2401 	push	#0x07
      000D47 CDr09r1A         [ 4] 2402 	call	_ST7735_Write
      000D4A 5B 02            [ 2] 2403 	addw	sp, #2
                                   2404 ;	main.c: 430: ST7735_Write(0x12, DAT);
      000D4C 4B 01            [ 1] 2405 	push	#0x01
      000D4E 4B 12            [ 1] 2406 	push	#0x12
      000D50 CDr09r1A         [ 4] 2407 	call	_ST7735_Write
      000D53 5B 02            [ 2] 2408 	addw	sp, #2
                                   2409 ;	main.c: 431: ST7735_Write(0x37, DAT);
      000D55 4B 01            [ 1] 2410 	push	#0x01
      000D57 4B 37            [ 1] 2411 	push	#0x37
      000D59 CDr09r1A         [ 4] 2412 	call	_ST7735_Write
      000D5C 5B 02            [ 2] 2413 	addw	sp, #2
                                   2414 ;	main.c: 432: ST7735_Write(0x32, DAT);
      000D5E 4B 01            [ 1] 2415 	push	#0x01
      000D60 4B 32            [ 1] 2416 	push	#0x32
      000D62 CDr09r1A         [ 4] 2417 	call	_ST7735_Write
      000D65 5B 02            [ 2] 2418 	addw	sp, #2
                                   2419 ;	main.c: 433: ST7735_Write(0x29, DAT);
      000D67 4B 01            [ 1] 2420 	push	#0x01
      000D69 4B 29            [ 1] 2421 	push	#0x29
      000D6B CDr09r1A         [ 4] 2422 	call	_ST7735_Write
      000D6E 5B 02            [ 2] 2423 	addw	sp, #2
                                   2424 ;	main.c: 434: ST7735_Write(0x2D, DAT);
      000D70 4B 01            [ 1] 2425 	push	#0x01
      000D72 4B 2D            [ 1] 2426 	push	#0x2d
      000D74 CDr09r1A         [ 4] 2427 	call	_ST7735_Write
      000D77 5B 02            [ 2] 2428 	addw	sp, #2
                                   2429 ;	main.c: 435: ST7735_Write(0x29, DAT);
      000D79 4B 01            [ 1] 2430 	push	#0x01
      000D7B 4B 29            [ 1] 2431 	push	#0x29
      000D7D CDr09r1A         [ 4] 2432 	call	_ST7735_Write
      000D80 5B 02            [ 2] 2433 	addw	sp, #2
                                   2434 ;	main.c: 436: ST7735_Write(0x25, DAT);
      000D82 4B 01            [ 1] 2435 	push	#0x01
      000D84 4B 25            [ 1] 2436 	push	#0x25
      000D86 CDr09r1A         [ 4] 2437 	call	_ST7735_Write
      000D89 5B 02            [ 2] 2438 	addw	sp, #2
                                   2439 ;	main.c: 437: ST7735_Write(0x2B, DAT);
      000D8B 4B 01            [ 1] 2440 	push	#0x01
      000D8D 4B 2B            [ 1] 2441 	push	#0x2b
      000D8F CDr09r1A         [ 4] 2442 	call	_ST7735_Write
      000D92 5B 02            [ 2] 2443 	addw	sp, #2
                                   2444 ;	main.c: 438: ST7735_Write(0x39, DAT);
      000D94 4B 01            [ 1] 2445 	push	#0x01
      000D96 4B 39            [ 1] 2446 	push	#0x39
      000D98 CDr09r1A         [ 4] 2447 	call	_ST7735_Write
      000D9B 5B 02            [ 2] 2448 	addw	sp, #2
                                   2449 ;	main.c: 439: ST7735_Write(0x00, DAT);
      000D9D 4B 01            [ 1] 2450 	push	#0x01
      000D9F 4B 00            [ 1] 2451 	push	#0x00
      000DA1 CDr09r1A         [ 4] 2452 	call	_ST7735_Write
      000DA4 5B 02            [ 2] 2453 	addw	sp, #2
                                   2454 ;	main.c: 440: ST7735_Write(0x01, DAT);
      000DA6 4B 01            [ 1] 2455 	push	#0x01
      000DA8 4B 01            [ 1] 2456 	push	#0x01
      000DAA CDr09r1A         [ 4] 2457 	call	_ST7735_Write
      000DAD 5B 02            [ 2] 2458 	addw	sp, #2
                                   2459 ;	main.c: 441: ST7735_Write(0x03, DAT);
      000DAF 4B 01            [ 1] 2460 	push	#0x01
      000DB1 4B 03            [ 1] 2461 	push	#0x03
      000DB3 CDr09r1A         [ 4] 2462 	call	_ST7735_Write
      000DB6 5B 02            [ 2] 2463 	addw	sp, #2
                                   2464 ;	main.c: 442: ST7735_Write(0x10, DAT);
      000DB8 4B 01            [ 1] 2465 	push	#0x01
      000DBA 4B 10            [ 1] 2466 	push	#0x10
      000DBC CDr09r1A         [ 4] 2467 	call	_ST7735_Write
      000DBF 5B 02            [ 2] 2468 	addw	sp, #2
                                   2469 ;	main.c: 443: ST7735_Write(ST7735_GMCTRN1, CMD);
      000DC1 4B 00            [ 1] 2470 	push	#0x00
      000DC3 4B E1            [ 1] 2471 	push	#0xe1
      000DC5 CDr09r1A         [ 4] 2472 	call	_ST7735_Write
      000DC8 5B 02            [ 2] 2473 	addw	sp, #2
                                   2474 ;	main.c: 444: ST7735_Write(0x03, DAT);
      000DCA 4B 01            [ 1] 2475 	push	#0x01
      000DCC 4B 03            [ 1] 2476 	push	#0x03
      000DCE CDr09r1A         [ 4] 2477 	call	_ST7735_Write
      000DD1 5B 02            [ 2] 2478 	addw	sp, #2
                                   2479 ;	main.c: 445: ST7735_Write(0x1D, DAT);
      000DD3 4B 01            [ 1] 2480 	push	#0x01
      000DD5 4B 1D            [ 1] 2481 	push	#0x1d
      000DD7 CDr09r1A         [ 4] 2482 	call	_ST7735_Write
      000DDA 5B 02            [ 2] 2483 	addw	sp, #2
                                   2484 ;	main.c: 446: ST7735_Write(0x07, DAT);
      000DDC 4B 01            [ 1] 2485 	push	#0x01
      000DDE 4B 07            [ 1] 2486 	push	#0x07
      000DE0 CDr09r1A         [ 4] 2487 	call	_ST7735_Write
      000DE3 5B 02            [ 2] 2488 	addw	sp, #2
                                   2489 ;	main.c: 447: ST7735_Write(0x06, DAT);
      000DE5 4B 01            [ 1] 2490 	push	#0x01
      000DE7 4B 06            [ 1] 2491 	push	#0x06
      000DE9 CDr09r1A         [ 4] 2492 	call	_ST7735_Write
      000DEC 5B 02            [ 2] 2493 	addw	sp, #2
                                   2494 ;	main.c: 448: ST7735_Write(0x2E, DAT);
      000DEE 4B 01            [ 1] 2495 	push	#0x01
      000DF0 4B 2E            [ 1] 2496 	push	#0x2e
      000DF2 CDr09r1A         [ 4] 2497 	call	_ST7735_Write
      000DF5 5B 02            [ 2] 2498 	addw	sp, #2
                                   2499 ;	main.c: 449: ST7735_Write(0x2C, DAT);
      000DF7 4B 01            [ 1] 2500 	push	#0x01
      000DF9 4B 2C            [ 1] 2501 	push	#0x2c
      000DFB CDr09r1A         [ 4] 2502 	call	_ST7735_Write
      000DFE 5B 02            [ 2] 2503 	addw	sp, #2
                                   2504 ;	main.c: 450: ST7735_Write(0x29, DAT);
      000E00 4B 01            [ 1] 2505 	push	#0x01
      000E02 4B 29            [ 1] 2506 	push	#0x29
      000E04 CDr09r1A         [ 4] 2507 	call	_ST7735_Write
      000E07 5B 02            [ 2] 2508 	addw	sp, #2
                                   2509 ;	main.c: 451: ST7735_Write(0x2D, DAT);
      000E09 4B 01            [ 1] 2510 	push	#0x01
      000E0B 4B 2D            [ 1] 2511 	push	#0x2d
      000E0D CDr09r1A         [ 4] 2512 	call	_ST7735_Write
      000E10 5B 02            [ 2] 2513 	addw	sp, #2
                                   2514 ;	main.c: 452: ST7735_Write(0x2E, DAT);
      000E12 4B 01            [ 1] 2515 	push	#0x01
      000E14 4B 2E            [ 1] 2516 	push	#0x2e
      000E16 CDr09r1A         [ 4] 2517 	call	_ST7735_Write
      000E19 5B 02            [ 2] 2518 	addw	sp, #2
                                   2519 ;	main.c: 453: ST7735_Write(0x2E, DAT);
      000E1B 4B 01            [ 1] 2520 	push	#0x01
      000E1D 4B 2E            [ 1] 2521 	push	#0x2e
      000E1F CDr09r1A         [ 4] 2522 	call	_ST7735_Write
      000E22 5B 02            [ 2] 2523 	addw	sp, #2
                                   2524 ;	main.c: 454: ST7735_Write(0x37, DAT);
      000E24 4B 01            [ 1] 2525 	push	#0x01
      000E26 4B 37            [ 1] 2526 	push	#0x37
      000E28 CDr09r1A         [ 4] 2527 	call	_ST7735_Write
      000E2B 5B 02            [ 2] 2528 	addw	sp, #2
                                   2529 ;	main.c: 455: ST7735_Write(0x3F, DAT);
      000E2D 4B 01            [ 1] 2530 	push	#0x01
      000E2F 4B 3F            [ 1] 2531 	push	#0x3f
      000E31 CDr09r1A         [ 4] 2532 	call	_ST7735_Write
      000E34 5B 02            [ 2] 2533 	addw	sp, #2
                                   2534 ;	main.c: 456: ST7735_Write(0x00, DAT);
      000E36 4B 01            [ 1] 2535 	push	#0x01
      000E38 4B 00            [ 1] 2536 	push	#0x00
      000E3A CDr09r1A         [ 4] 2537 	call	_ST7735_Write
      000E3D 5B 02            [ 2] 2538 	addw	sp, #2
                                   2539 ;	main.c: 457: ST7735_Write(0x00, DAT);
      000E3F 4B 01            [ 1] 2540 	push	#0x01
      000E41 4B 00            [ 1] 2541 	push	#0x00
      000E43 CDr09r1A         [ 4] 2542 	call	_ST7735_Write
      000E46 5B 02            [ 2] 2543 	addw	sp, #2
                                   2544 ;	main.c: 458: ST7735_Write(0x02, DAT);
      000E48 4B 01            [ 1] 2545 	push	#0x01
      000E4A 4B 02            [ 1] 2546 	push	#0x02
      000E4C CDr09r1A         [ 4] 2547 	call	_ST7735_Write
      000E4F 5B 02            [ 2] 2548 	addw	sp, #2
                                   2549 ;	main.c: 459: ST7735_Write(0x10, DAT);
      000E51 4B 01            [ 1] 2550 	push	#0x01
      000E53 4B 10            [ 1] 2551 	push	#0x10
      000E55 CDr09r1A         [ 4] 2552 	call	_ST7735_Write
      000E58 5B 02            [ 2] 2553 	addw	sp, #2
                                   2554 ;	main.c: 460: ST7735_Write(ST7735_NORON, CMD);
      000E5A 4B 00            [ 1] 2555 	push	#0x00
      000E5C 4B 13            [ 1] 2556 	push	#0x13
      000E5E CDr09r1A         [ 4] 2557 	call	_ST7735_Write
      000E61 5B 02            [ 2] 2558 	addw	sp, #2
                                   2559 ;	main.c: 32: for (i = 0; i < ((F_CPU / 18000UL) * ms); i++)
      000E63 90 5F            [ 1] 2560 	clrw	y
      000E65 5F               [ 1] 2561 	clrw	x
      000E66                       2562 00128$:
      000E66 90 A3 04 56      [ 2] 2563 	cpw	y, #0x0456
      000E6A 9F               [ 1] 2564 	ld	a, xl
      000E6B A2 00            [ 1] 2565 	sbc	a, #0x00
      000E6D 9E               [ 1] 2566 	ld	a, xh
      000E6E A2 00            [ 1] 2567 	sbc	a, #0x00
      000E70 24 08            [ 1] 2568 	jrnc	00110$
                                   2569 ;	main.c: 33: __asm__("nop");
      000E72 9D               [ 1] 2570 	nop
                                   2571 ;	main.c: 32: for (i = 0; i < ((F_CPU / 18000UL) * ms); i++)
      000E73 90 5C            [ 1] 2572 	incw	y
      000E75 26 EF            [ 1] 2573 	jrne	00128$
      000E77 5C               [ 1] 2574 	incw	x
      000E78 20 EC            [ 2] 2575 	jra	00128$
                                   2576 ;	main.c: 461: delay_ms(10);
      000E7A                       2577 00110$:
                                   2578 ;	main.c: 462: ST7735_Write(ST7735_DISPON, CMD);
      000E7A 4B 00            [ 1] 2579 	push	#0x00
      000E7C 4B 29            [ 1] 2580 	push	#0x29
      000E7E CDr09r1A         [ 4] 2581 	call	_ST7735_Write
      000E81 5B 02            [ 2] 2582 	addw	sp, #2
                                   2583 ;	main.c: 32: for (i = 0; i < ((F_CPU / 18000UL) * ms); i++)
      000E83 90 5F            [ 1] 2584 	clrw	y
      000E85 5F               [ 1] 2585 	clrw	x
      000E86                       2586 00131$:
      000E86 90 A3 2B 5C      [ 2] 2587 	cpw	y, #0x2b5c
      000E8A 9F               [ 1] 2588 	ld	a, xl
      000E8B A2 00            [ 1] 2589 	sbc	a, #0x00
      000E8D 9E               [ 1] 2590 	ld	a, xh
      000E8E A2 00            [ 1] 2591 	sbc	a, #0x00
      000E90 24 08            [ 1] 2592 	jrnc	00112$
                                   2593 ;	main.c: 33: __asm__("nop");
      000E92 9D               [ 1] 2594 	nop
                                   2595 ;	main.c: 32: for (i = 0; i < ((F_CPU / 18000UL) * ms); i++)
      000E93 90 5C            [ 1] 2596 	incw	y
      000E95 26 EF            [ 1] 2597 	jrne	00131$
      000E97 5C               [ 1] 2598 	incw	x
      000E98 20 EC            [ 2] 2599 	jra	00131$
                                   2600 ;	main.c: 463: delay_ms(100);
      000E9A                       2601 00112$:
                                   2602 ;	main.c: 465: ST7735_Write(ST7735_MADCTL, CMD);
      000E9A 4B 00            [ 1] 2603 	push	#0x00
      000E9C 4B 36            [ 1] 2604 	push	#0x36
      000E9E CDr09r1A         [ 4] 2605 	call	_ST7735_Write
      000EA1 5B 02            [ 2] 2606 	addw	sp, #2
                                   2607 ;	main.c: 466: ST7735_Write(MADCTL_MX | MADCTL_MV | MADCTL_RGB, DAT);
      000EA3 4B 01            [ 1] 2608 	push	#0x01
      000EA5 4B 68            [ 1] 2609 	push	#0x68
      000EA7 CDr09r1A         [ 4] 2610 	call	_ST7735_Write
      000EAA 5B 02            [ 2] 2611 	addw	sp, #2
                                   2612 ;	main.c: 32: for (i = 0; i < ((F_CPU / 18000UL) * ms); i++)
      000EAC 90 5F            [ 1] 2613 	clrw	y
      000EAE 5F               [ 1] 2614 	clrw	x
      000EAF                       2615 00134$:
      000EAF 90 A3 04 56      [ 2] 2616 	cpw	y, #0x0456
      000EB3 9F               [ 1] 2617 	ld	a, xl
      000EB4 A2 00            [ 1] 2618 	sbc	a, #0x00
      000EB6 9E               [ 1] 2619 	ld	a, xh
      000EB7 A2 00            [ 1] 2620 	sbc	a, #0x00
      000EB9 25 01            [ 1] 2621 	jrc	00227$
      000EBB 81               [ 4] 2622 	ret
      000EBC                       2623 00227$:
                                   2624 ;	main.c: 33: __asm__("nop");
      000EBC 9D               [ 1] 2625 	nop
                                   2626 ;	main.c: 32: for (i = 0; i < ((F_CPU / 18000UL) * ms); i++)
      000EBD 90 5C            [ 1] 2627 	incw	y
      000EBF 26 EE            [ 1] 2628 	jrne	00134$
      000EC1 5C               [ 1] 2629 	incw	x
      000EC2 20 EB            [ 2] 2630 	jra	00134$
                                   2631 ;	main.c: 467: delay_ms(10);
                                   2632 ;	main.c: 468: }
      000EC4 81               [ 4] 2633 	ret
                                   2634 ;	main.c: 471: void ST7735_Clear(uint16_t color) {
                                   2635 ;	-----------------------------------------
                                   2636 ;	 function ST7735_Clear
                                   2637 ;	-----------------------------------------
      000EC5                       2638 _ST7735_Clear:
      000EC5 52 02            [ 2] 2639 	sub	sp, #2
                                   2640 ;	main.c: 472: ST7735_SetAddrWindow(0,0,ST7735_TFTLENGTH+3,ST7735_TFTWIDTH+3);
      000EC7 4B 53            [ 1] 2641 	push	#0x53
      000EC9 4B A3            [ 1] 2642 	push	#0xa3
      000ECB 4B 00            [ 1] 2643 	push	#0x00
      000ECD 4B 00            [ 1] 2644 	push	#0x00
      000ECF CDr09r62         [ 4] 2645 	call	_ST7735_SetAddrWindow
      000ED2 5B 04            [ 2] 2646 	addw	sp, #4
                                   2647 ;	main.c: 473: for (int i=0; i< ST7735_TFTWIDTH+3; ++i)
      000ED4 5F               [ 1] 2648 	clrw	x
      000ED5 1F 01            [ 2] 2649 	ldw	(0x01, sp), x
      000ED7                       2650 00107$:
      000ED7 1E 01            [ 2] 2651 	ldw	x, (0x01, sp)
      000ED9 A3 00 53         [ 2] 2652 	cpw	x, #0x0053
      000EDC 2E 1B            [ 1] 2653 	jrsge	00109$
                                   2654 ;	main.c: 474: for(int j=0; j< ST7735_TFTLENGTH+3; ++j)
      000EDE 5F               [ 1] 2655 	clrw	x
      000EDF                       2656 00104$:
      000EDF A3 00 A3         [ 2] 2657 	cpw	x, #0x00a3
      000EE2 2E 0E            [ 1] 2658 	jrsge	00108$
                                   2659 ;	main.c: 475: ST7735_Write16(color);
      000EE4 89               [ 2] 2660 	pushw	x
      000EE5 16 07            [ 2] 2661 	ldw	y, (0x07, sp)
      000EE7 90 89            [ 2] 2662 	pushw	y
      000EE9 CDr09r39         [ 4] 2663 	call	_ST7735_Write16
      000EEC 5B 02            [ 2] 2664 	addw	sp, #2
      000EEE 85               [ 2] 2665 	popw	x
                                   2666 ;	main.c: 474: for(int j=0; j< ST7735_TFTLENGTH+3; ++j)
      000EEF 5C               [ 1] 2667 	incw	x
      000EF0 20 ED            [ 2] 2668 	jra	00104$
      000EF2                       2669 00108$:
                                   2670 ;	main.c: 473: for (int i=0; i< ST7735_TFTWIDTH+3; ++i)
      000EF2 1E 01            [ 2] 2671 	ldw	x, (0x01, sp)
      000EF4 5C               [ 1] 2672 	incw	x
      000EF5 1F 01            [ 2] 2673 	ldw	(0x01, sp), x
      000EF7 20 DE            [ 2] 2674 	jra	00107$
      000EF9                       2675 00109$:
                                   2676 ;	main.c: 476: }
      000EF9 5B 02            [ 2] 2677 	addw	sp, #2
      000EFB 81               [ 4] 2678 	ret
                                   2679 ;	main.c: 478: void ST7735_Draw(int16_t x, int16_t y, const uint8_t *data, uint8_t w, uint8_t h) {
                                   2680 ;	-----------------------------------------
                                   2681 ;	 function ST7735_Draw
                                   2682 ;	-----------------------------------------
      000EFC                       2683 _ST7735_Draw:
      000EFC 52 12            [ 2] 2684 	sub	sp, #18
                                   2685 ;	main.c: 479: uint8_t xoff=0, yoff=0, wend=w, hend=h;
      000EFE 0F 06            [ 1] 2686 	clr	(0x06, sp)
      000F00 0F 05            [ 1] 2687 	clr	(0x05, sp)
      000F02 7B 1B            [ 1] 2688 	ld	a, (0x1b, sp)
      000F04 6B 04            [ 1] 2689 	ld	(0x04, sp), a
      000F06 7B 1C            [ 1] 2690 	ld	a, (0x1c, sp)
      000F08 6B 03            [ 1] 2691 	ld	(0x03, sp), a
                                   2692 ;	main.c: 481: xoff = 0 - x;
      000F0A 7B 16            [ 1] 2693 	ld	a, (0x16, sp)
      000F0C 97               [ 1] 2694 	ld	xl, a
                                   2695 ;	main.c: 480: if (x < 0)
      000F0D 0D 15            [ 1] 2696 	tnz	(0x15, sp)
      000F0F 2A 04            [ 1] 2697 	jrpl	00102$
                                   2698 ;	main.c: 481: xoff = 0 - x;
      000F11 9F               [ 1] 2699 	ld	a, xl
      000F12 40               [ 1] 2700 	neg	a
      000F13 6B 06            [ 1] 2701 	ld	(0x06, sp), a
      000F15                       2702 00102$:
                                   2703 ;	main.c: 482: if ((x+w) > ST7735_TFTLENGTH)
      000F15 7B 04            [ 1] 2704 	ld	a, (0x04, sp)
      000F17 90 5F            [ 1] 2705 	clrw	y
      000F19 90 97            [ 1] 2706 	ld	yl, a
      000F1B 72 F9 15         [ 2] 2707 	addw	y, (0x15, sp)
      000F1E 90 A3 00 A0      [ 2] 2708 	cpw	y, #0x00a0
      000F22 2D 08            [ 1] 2709 	jrsle	00104$
                                   2710 ;	main.c: 483: wend = ST7735_TFTLENGTH-x;
      000F24 A6 A0            [ 1] 2711 	ld	a, #0xa0
      000F26 89               [ 2] 2712 	pushw	x
      000F27 10 02            [ 1] 2713 	sub	a, (#2, sp)
      000F29 85               [ 2] 2714 	popw	x
      000F2A 6B 04            [ 1] 2715 	ld	(0x04, sp), a
      000F2C                       2716 00104$:
                                   2717 ;	main.c: 485: yoff = 0 - y;
      000F2C 7B 18            [ 1] 2718 	ld	a, (0x18, sp)
      000F2E 95               [ 1] 2719 	ld	xh, a
                                   2720 ;	main.c: 484: if (y<0)
      000F2F 0D 17            [ 1] 2721 	tnz	(0x17, sp)
      000F31 2A 04            [ 1] 2722 	jrpl	00106$
                                   2723 ;	main.c: 485: yoff = 0 - y;
      000F33 9E               [ 1] 2724 	ld	a, xh
      000F34 40               [ 1] 2725 	neg	a
      000F35 6B 05            [ 1] 2726 	ld	(0x05, sp), a
      000F37                       2727 00106$:
                                   2728 ;	main.c: 486: if ((y+h) > ST7735_TFTWIDTH)
      000F37 7B 03            [ 1] 2729 	ld	a, (0x03, sp)
      000F39 90 5F            [ 1] 2730 	clrw	y
      000F3B 90 97            [ 1] 2731 	ld	yl, a
      000F3D 72 F9 17         [ 2] 2732 	addw	y, (0x17, sp)
      000F40 90 A3 00 50      [ 2] 2733 	cpw	y, #0x0050
      000F44 2D 08            [ 1] 2734 	jrsle	00108$
                                   2735 ;	main.c: 487: hend = ST7735_TFTWIDTH-y;
      000F46 A6 50            [ 1] 2736 	ld	a, #0x50
      000F48 89               [ 2] 2737 	pushw	x
      000F49 10 01            [ 1] 2738 	sub	a, (#1, sp)
      000F4B 85               [ 2] 2739 	popw	x
      000F4C 6B 03            [ 1] 2740 	ld	(0x03, sp), a
      000F4E                       2741 00108$:
                                   2742 ;	main.c: 488: ST7735_SetAddrWindow(x+xoff,y+yoff,wend,hend);
      000F4E 7B 05            [ 1] 2743 	ld	a, (0x05, sp)
      000F50 6B 11            [ 1] 2744 	ld	(0x11, sp), a
      000F52 9E               [ 1] 2745 	ld	a, xh
      000F53 1B 11            [ 1] 2746 	add	a, (0x11, sp)
      000F55 95               [ 1] 2747 	ld	xh, a
      000F56 7B 06            [ 1] 2748 	ld	a, (0x06, sp)
      000F58 6B 12            [ 1] 2749 	ld	(0x12, sp), a
      000F5A 9F               [ 1] 2750 	ld	a, xl
      000F5B 1B 12            [ 1] 2751 	add	a, (0x12, sp)
      000F5D 97               [ 1] 2752 	ld	xl, a
      000F5E 7B 03            [ 1] 2753 	ld	a, (0x03, sp)
      000F60 88               [ 1] 2754 	push	a
      000F61 7B 05            [ 1] 2755 	ld	a, (0x05, sp)
      000F63 88               [ 1] 2756 	push	a
      000F64 9E               [ 1] 2757 	ld	a, xh
      000F65 88               [ 1] 2758 	push	a
      000F66 9F               [ 1] 2759 	ld	a, xl
      000F67 88               [ 1] 2760 	push	a
      000F68 CDr09r62         [ 4] 2761 	call	_ST7735_SetAddrWindow
      000F6B 5B 04            [ 2] 2762 	addw	sp, #4
                                   2763 ;	main.c: 489: for (int j=yoff; j<hend/2; ++j)
      000F6D 7B 05            [ 1] 2764 	ld	a, (0x05, sp)
      000F6F 6B 02            [ 1] 2765 	ld	(0x02, sp), a
      000F71 0F 01            [ 1] 2766 	clr	(0x01, sp)
      000F73 16 01            [ 2] 2767 	ldw	y, (0x01, sp)
      000F75 17 09            [ 2] 2768 	ldw	(0x09, sp), y
      000F77                       2769 00115$:
      000F77 7B 03            [ 1] 2770 	ld	a, (0x03, sp)
      000F79 6B 08            [ 1] 2771 	ld	(0x08, sp), a
      000F7B 0F 07            [ 1] 2772 	clr	(0x07, sp)
      000F7D 4B 02            [ 1] 2773 	push	#0x02
      000F7F 4B 00            [ 1] 2774 	push	#0x00
      000F81 1E 09            [ 2] 2775 	ldw	x, (0x09, sp)
      000F83 89               [ 2] 2776 	pushw	x
      000F84 CDr00r00         [ 4] 2777 	call	__divsint
      000F87 5B 04            [ 2] 2778 	addw	sp, #4
      000F89 1F 0F            [ 2] 2779 	ldw	(0x0f, sp), x
      000F8B 1E 09            [ 2] 2780 	ldw	x, (0x09, sp)
      000F8D 13 0F            [ 2] 2781 	cpw	x, (0x0f, sp)
      000F8F 2E 20            [ 1] 2782 	jrsge	00117$
                                   2783 ;	main.c: 490: for (int i=xoff; i<wend; ++i) {
      000F91 5F               [ 1] 2784 	clrw	x
      000F92 7B 06            [ 1] 2785 	ld	a, (0x06, sp)
      000F94 97               [ 1] 2786 	ld	xl, a
      000F95 1F 0D            [ 2] 2787 	ldw	(0x0d, sp), x
      000F97                       2788 00112$:
      000F97 7B 04            [ 1] 2789 	ld	a, (0x04, sp)
      000F99 6B 0C            [ 1] 2790 	ld	(0x0c, sp), a
      000F9B 0F 0B            [ 1] 2791 	clr	(0x0b, sp)
      000F9D 1E 0D            [ 2] 2792 	ldw	x, (0x0d, sp)
      000F9F 13 0B            [ 2] 2793 	cpw	x, (0x0b, sp)
      000FA1 2E 07            [ 1] 2794 	jrsge	00116$
      000FA3 1E 0D            [ 2] 2795 	ldw	x, (0x0d, sp)
      000FA5 5C               [ 1] 2796 	incw	x
      000FA6 1F 0D            [ 2] 2797 	ldw	(0x0d, sp), x
      000FA8 20 ED            [ 2] 2798 	jra	00112$
      000FAA                       2799 00116$:
                                   2800 ;	main.c: 489: for (int j=yoff; j<hend/2; ++j)
      000FAA 1E 09            [ 2] 2801 	ldw	x, (0x09, sp)
      000FAC 5C               [ 1] 2802 	incw	x
      000FAD 1F 09            [ 2] 2803 	ldw	(0x09, sp), x
      000FAF 20 C6            [ 2] 2804 	jra	00115$
      000FB1                       2805 00117$:
                                   2806 ;	main.c: 496: }
      000FB1 5B 12            [ 2] 2807 	addw	sp, #18
      000FB3 81               [ 4] 2808 	ret
                                   2809 ;	main.c: 499: void ST7735_Fill(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint16_t color) {
                                   2810 ;	-----------------------------------------
                                   2811 ;	 function ST7735_Fill
                                   2812 ;	-----------------------------------------
      000FB4                       2813 _ST7735_Fill:
      000FB4 52 06            [ 2] 2814 	sub	sp, #6
                                   2815 ;	main.c: 500: ST7735_SetAddrWindow(x, y, w, h);
      000FB6 7B 0C            [ 1] 2816 	ld	a, (0x0c, sp)
      000FB8 88               [ 1] 2817 	push	a
      000FB9 7B 0C            [ 1] 2818 	ld	a, (0x0c, sp)
      000FBB 88               [ 1] 2819 	push	a
      000FBC 7B 0C            [ 1] 2820 	ld	a, (0x0c, sp)
      000FBE 88               [ 1] 2821 	push	a
      000FBF 7B 0C            [ 1] 2822 	ld	a, (0x0c, sp)
      000FC1 88               [ 1] 2823 	push	a
      000FC2 CDr09r62         [ 4] 2824 	call	_ST7735_SetAddrWindow
      000FC5 5B 04            [ 2] 2825 	addw	sp, #4
                                   2826 ;	main.c: 501: for (int i=0; i< w; ++i)
      000FC7 5F               [ 1] 2827 	clrw	x
      000FC8 1F 05            [ 2] 2828 	ldw	(0x05, sp), x
      000FCA                       2829 00107$:
      000FCA 7B 0B            [ 1] 2830 	ld	a, (0x0b, sp)
      000FCC 6B 04            [ 1] 2831 	ld	(0x04, sp), a
      000FCE 0F 03            [ 1] 2832 	clr	(0x03, sp)
      000FD0 1E 05            [ 2] 2833 	ldw	x, (0x05, sp)
      000FD2 13 03            [ 2] 2834 	cpw	x, (0x03, sp)
      000FD4 2E 20            [ 1] 2835 	jrsge	00109$
                                   2836 ;	main.c: 502: for(int j=0; j< h; ++j)
      000FD6 5F               [ 1] 2837 	clrw	x
      000FD7                       2838 00104$:
      000FD7 7B 0C            [ 1] 2839 	ld	a, (0x0c, sp)
      000FD9 6B 02            [ 1] 2840 	ld	(0x02, sp), a
      000FDB 0F 01            [ 1] 2841 	clr	(0x01, sp)
      000FDD 13 01            [ 2] 2842 	cpw	x, (0x01, sp)
      000FDF 2E 0E            [ 1] 2843 	jrsge	00108$
                                   2844 ;	main.c: 503: ST7735_Write16(color);
      000FE1 89               [ 2] 2845 	pushw	x
      000FE2 16 0F            [ 2] 2846 	ldw	y, (0x0f, sp)
      000FE4 90 89            [ 2] 2847 	pushw	y
      000FE6 CDr09r39         [ 4] 2848 	call	_ST7735_Write16
      000FE9 5B 02            [ 2] 2849 	addw	sp, #2
      000FEB 85               [ 2] 2850 	popw	x
                                   2851 ;	main.c: 502: for(int j=0; j< h; ++j)
      000FEC 5C               [ 1] 2852 	incw	x
      000FED 20 E8            [ 2] 2853 	jra	00104$
      000FEF                       2854 00108$:
                                   2855 ;	main.c: 501: for (int i=0; i< w; ++i)
      000FEF 1E 05            [ 2] 2856 	ldw	x, (0x05, sp)
      000FF1 5C               [ 1] 2857 	incw	x
      000FF2 1F 05            [ 2] 2858 	ldw	(0x05, sp), x
      000FF4 20 D4            [ 2] 2859 	jra	00107$
      000FF6                       2860 00109$:
                                   2861 ;	main.c: 504: }
      000FF6 5B 06            [ 2] 2862 	addw	sp, #6
      000FF8 81               [ 4] 2863 	ret
                                   2864 	.area CODE
                                   2865 	.area CONST
      000000                       2866 _pallet:
      000000 32 00                 2867 	.dw #0x3200
      000002 12 40                 2868 	.dw #0x1240
      000004 5C 85                 2869 	.dw #0x5c85
      000006 75 AD                 2870 	.dw #0x75ad
      000008 1B 11                 2871 	.dw #0x1b11
      00000A 09 80                 2872 	.dw #0x0980
      00000C FC D6                 2873 	.dw #0xfcd6
      00000E                       2874 _harry_raw:
      00000E 00                    2875 	.db #0x00	; 0
      00000F 00                    2876 	.db #0x00	; 0
      000010 22                    2877 	.db #0x22	; 34
      000011 22                    2878 	.db #0x22	; 34
      000012 22                    2879 	.db #0x22	; 34
      000013 22                    2880 	.db #0x22	; 34
      000014 22                    2881 	.db #0x22	; 34
      000015 22                    2882 	.db #0x22	; 34
      000016 66                    2883 	.db #0x66	; 102	'f'
      000017 66                    2884 	.db #0x66	; 102	'f'
      000018 22                    2885 	.db #0x22	; 34
      000019 66                    2886 	.db #0x66	; 102	'f'
      00001A 22                    2887 	.db #0x22	; 34
      00001B 22                    2888 	.db #0x22	; 34
      00001C 22                    2889 	.db #0x22	; 34
      00001D 22                    2890 	.db #0x22	; 34
      00001E 66                    2891 	.db #0x66	; 102	'f'
      00001F 66                    2892 	.db #0x66	; 102	'f'
      000020 22                    2893 	.db #0x22	; 34
      000021 66                    2894 	.db #0x66	; 102	'f'
      000022 22                    2895 	.db #0x22	; 34
      000023 22                    2896 	.db #0x22	; 34
      000024 22                    2897 	.db #0x22	; 34
      000025 22                    2898 	.db #0x22	; 34
      000026 66                    2899 	.db #0x66	; 102	'f'
      000027 22                    2900 	.db #0x22	; 34
      000028 22                    2901 	.db #0x22	; 34
      000029 66                    2902 	.db #0x66	; 102	'f'
      00002A 22                    2903 	.db #0x22	; 34
      00002B 22                    2904 	.db #0x22	; 34
      00002C 22                    2905 	.db #0x22	; 34
      00002D 22                    2906 	.db #0x22	; 34
      00002E 33                    2907 	.db #0x33	; 51	'3'
      00002F 33                    2908 	.db #0x33	; 51	'3'
      000030 22                    2909 	.db #0x22	; 34
      000031 33                    2910 	.db #0x33	; 51	'3'
      000032 22                    2911 	.db #0x22	; 34
      000033 22                    2912 	.db #0x22	; 34
      000034 22                    2913 	.db #0x22	; 34
      000035 22                    2914 	.db #0x22	; 34
      000036 33                    2915 	.db #0x33	; 51	'3'
      000037 33                    2916 	.db #0x33	; 51	'3'
      000038 33                    2917 	.db #0x33	; 51	'3'
      000039 33                    2918 	.db #0x33	; 51	'3'
      00003A 22                    2919 	.db #0x22	; 34
      00003B 22                    2920 	.db #0x22	; 34
      00003C 22                    2921 	.db #0x22	; 34
      00003D 22                    2922 	.db #0x22	; 34
      00003E 33                    2923 	.db #0x33	; 51	'3'
      00003F 33                    2924 	.db #0x33	; 51	'3'
      000040 22                    2925 	.db #0x22	; 34
      000041 22                    2926 	.db #0x22	; 34
      000042 22                    2927 	.db #0x22	; 34
      000043 22                    2928 	.db #0x22	; 34
      000044 22                    2929 	.db #0x22	; 34
      000045 22                    2930 	.db #0x22	; 34
      000046 33                    2931 	.db #0x33	; 51	'3'
      000047 33                    2932 	.db #0x33	; 51	'3'
      000048 22                    2933 	.db #0x22	; 34
      000049 22                    2934 	.db #0x22	; 34
      00004A 22                    2935 	.db #0x22	; 34
      00004B 22                    2936 	.db #0x22	; 34
      00004C 22                    2937 	.db #0x22	; 34
      00004D 22                    2938 	.db #0x22	; 34
      00004E 33                    2939 	.db #0x33	; 51	'3'
      00004F 33                    2940 	.db #0x33	; 51	'3'
      000050 22                    2941 	.db #0x22	; 34
      000051 22                    2942 	.db #0x22	; 34
      000052 22                    2943 	.db #0x22	; 34
      000053 22                    2944 	.db #0x22	; 34
      000054 22                    2945 	.db #0x22	; 34
      000055 22                    2946 	.db #0x22	; 34
      000056 33                    2947 	.db #0x33	; 51	'3'
      000057 33                    2948 	.db #0x33	; 51	'3'
      000058 22                    2949 	.db #0x22	; 34
      000059 22                    2950 	.db #0x22	; 34
      00005A 22                    2951 	.db #0x22	; 34
      00005B 22                    2952 	.db #0x22	; 34
      00005C 22                    2953 	.db #0x22	; 34
      00005D 22                    2954 	.db #0x22	; 34
      00005E 33                    2955 	.db #0x33	; 51	'3'
      00005F 33                    2956 	.db #0x33	; 51	'3'
      000060 22                    2957 	.db #0x22	; 34
      000061 22                    2958 	.db #0x22	; 34
      000062 22                    2959 	.db #0x22	; 34
      000063 22                    2960 	.db #0x22	; 34
      000064 22                    2961 	.db #0x22	; 34
      000065 22                    2962 	.db #0x22	; 34
      000066 11                    2963 	.db #0x11	; 17
      000067 11                    2964 	.db #0x11	; 17
      000068 22                    2965 	.db #0x22	; 34
      000069 11                    2966 	.db #0x11	; 17
      00006A 11                    2967 	.db #0x11	; 17
      00006B 11                    2968 	.db #0x11	; 17
      00006C 22                    2969 	.db #0x22	; 34
      00006D 22                    2970 	.db #0x22	; 34
      00006E 11                    2971 	.db #0x11	; 17
      00006F 11                    2972 	.db #0x11	; 17
      000070 11                    2973 	.db #0x11	; 17
      000071 11                    2974 	.db #0x11	; 17
      000072 22                    2975 	.db #0x22	; 34
      000073 11                    2976 	.db #0x11	; 17
      000074 11                    2977 	.db #0x11	; 17
      000075 22                    2978 	.db #0x22	; 34
      000076 11                    2979 	.db #0x11	; 17
      000077 11                    2980 	.db #0x11	; 17
      000078 11                    2981 	.db #0x11	; 17
      000079 11                    2982 	.db #0x11	; 17
      00007A 22                    2983 	.db #0x22	; 34
      00007B 22                    2984 	.db #0x22	; 34
      00007C 11                    2985 	.db #0x11	; 17
      00007D 22                    2986 	.db #0x22	; 34
      00007E 22                    2987 	.db #0x22	; 34
      00007F 11                    2988 	.db #0x11	; 17
      000080 11                    2989 	.db #0x11	; 17
      000081 22                    2990 	.db #0x22	; 34
      000082 22                    2991 	.db #0x22	; 34
      000083 22                    2992 	.db #0x22	; 34
      000084 11                    2993 	.db #0x11	; 17
      000085 11                    2994 	.db #0x11	; 17
      000086                       2995 _gator1_raw:
      000086 22                    2996 	.db #0x22	; 34
      000087 22                    2997 	.db #0x22	; 34
      000088 22                    2998 	.db #0x22	; 34
      000089 22                    2999 	.db #0x22	; 34
      00008A 22                    3000 	.db #0x22	; 34
      00008B 22                    3001 	.db #0x22	; 34
      00008C 22                    3002 	.db #0x22	; 34
      00008D 22                    3003 	.db #0x22	; 34
      00008E 22                    3004 	.db #0x22	; 34
      00008F 22                    3005 	.db #0x22	; 34
      000090 22                    3006 	.db #0x22	; 34
      000091 22                    3007 	.db #0x22	; 34
      000092 22                    3008 	.db #0x22	; 34
      000093 22                    3009 	.db #0x22	; 34
      000094 22                    3010 	.db #0x22	; 34
      000095 22                    3011 	.db #0x22	; 34
      000096 44                    3012 	.db #0x44	; 68	'D'
      000097 44                    3013 	.db #0x44	; 68	'D'
      000098 44                    3014 	.db #0x44	; 68	'D'
      000099 44                    3015 	.db #0x44	; 68	'D'
      00009A 44                    3016 	.db #0x44	; 68	'D'
      00009B 55                    3017 	.db #0x55	; 85	'U'
      00009C 44                    3018 	.db #0x44	; 68	'D'
      00009D 44                    3019 	.db #0x44	; 68	'D'
      00009E 44                    3020 	.db #0x44	; 68	'D'
      00009F 44                    3021 	.db #0x44	; 68	'D'
      0000A0 44                    3022 	.db #0x44	; 68	'D'
      0000A1 44                    3023 	.db #0x44	; 68	'D'
      0000A2 44                    3024 	.db #0x44	; 68	'D'
      0000A3 55                    3025 	.db #0x55	; 85	'U'
      0000A4 55                    3026 	.db #0x55	; 85	'U'
      0000A5 44                    3027 	.db #0x44	; 68	'D'
      0000A6 55                    3028 	.db #0x55	; 85	'U'
      0000A7 55                    3029 	.db #0x55	; 85	'U'
      0000A8 55                    3030 	.db #0x55	; 85	'U'
      0000A9 55                    3031 	.db #0x55	; 85	'U'
      0000AA 55                    3032 	.db #0x55	; 85	'U'
      0000AB 55                    3033 	.db #0x55	; 85	'U'
      0000AC 55                    3034 	.db #0x55	; 85	'U'
      0000AD 55                    3035 	.db #0x55	; 85	'U'
      0000AE 44                    3036 	.db #0x44	; 68	'D'
      0000AF 55                    3037 	.db #0x55	; 85	'U'
      0000B0 44                    3038 	.db #0x44	; 68	'D'
      0000B1 55                    3039 	.db #0x55	; 85	'U'
      0000B2 44                    3040 	.db #0x44	; 68	'D'
      0000B3 55                    3041 	.db #0x55	; 85	'U'
      0000B4 44                    3042 	.db #0x44	; 68	'D'
      0000B5 55                    3043 	.db #0x55	; 85	'U'
      0000B6 55                    3044 	.db #0x55	; 85	'U'
      0000B7 44                    3045 	.db #0x44	; 68	'D'
      0000B8 55                    3046 	.db #0x55	; 85	'U'
      0000B9 44                    3047 	.db #0x44	; 68	'D'
      0000BA 55                    3048 	.db #0x55	; 85	'U'
      0000BB 44                    3049 	.db #0x44	; 68	'D'
      0000BC 55                    3050 	.db #0x55	; 85	'U'
      0000BD 55                    3051 	.db #0x55	; 85	'U'
      0000BE 55                    3052 	.db #0x55	; 85	'U'
      0000BF 55                    3053 	.db #0x55	; 85	'U'
      0000C0 55                    3054 	.db #0x55	; 85	'U'
      0000C1 55                    3055 	.db #0x55	; 85	'U'
      0000C2 55                    3056 	.db #0x55	; 85	'U'
      0000C3 55                    3057 	.db #0x55	; 85	'U'
      0000C4 55                    3058 	.db #0x55	; 85	'U'
      0000C5 55                    3059 	.db #0x55	; 85	'U'
      0000C6                       3060 _gator2_raw:
      0000C6 55                    3061 	.db #0x55	; 85	'U'
      0000C7 22                    3062 	.db #0x22	; 34
      0000C8 22                    3063 	.db #0x22	; 34
      0000C9 22                    3064 	.db #0x22	; 34
      0000CA 22                    3065 	.db #0x22	; 34
      0000CB 22                    3066 	.db #0x22	; 34
      0000CC 22                    3067 	.db #0x22	; 34
      0000CD 22                    3068 	.db #0x22	; 34
      0000CE 55                    3069 	.db #0x55	; 85	'U'
      0000CF 55                    3070 	.db #0x55	; 85	'U'
      0000D0 55                    3071 	.db #0x55	; 85	'U'
      0000D1 22                    3072 	.db #0x22	; 34
      0000D2 22                    3073 	.db #0x22	; 34
      0000D3 22                    3074 	.db #0x22	; 34
      0000D4 22                    3075 	.db #0x22	; 34
      0000D5 22                    3076 	.db #0x22	; 34
      0000D6 55                    3077 	.db #0x55	; 85	'U'
      0000D7 44                    3078 	.db #0x44	; 68	'D'
      0000D8 55                    3079 	.db #0x55	; 85	'U'
      0000D9 55                    3080 	.db #0x55	; 85	'U'
      0000DA 55                    3081 	.db #0x55	; 85	'U'
      0000DB 22                    3082 	.db #0x22	; 34
      0000DC 55                    3083 	.db #0x55	; 85	'U'
      0000DD 22                    3084 	.db #0x22	; 34
      0000DE 44                    3085 	.db #0x44	; 68	'D'
      0000DF 44                    3086 	.db #0x44	; 68	'D'
      0000E0 55                    3087 	.db #0x55	; 85	'U'
      0000E1 44                    3088 	.db #0x44	; 68	'D'
      0000E2 55                    3089 	.db #0x55	; 85	'U'
      0000E3 55                    3090 	.db #0x55	; 85	'U'
      0000E4 55                    3091 	.db #0x55	; 85	'U'
      0000E5 44                    3092 	.db #0x44	; 68	'D'
      0000E6 44                    3093 	.db #0x44	; 68	'D'
      0000E7 44                    3094 	.db #0x44	; 68	'D'
      0000E8 44                    3095 	.db #0x44	; 68	'D'
      0000E9 44                    3096 	.db #0x44	; 68	'D'
      0000EA 55                    3097 	.db #0x55	; 85	'U'
      0000EB 44                    3098 	.db #0x44	; 68	'D'
      0000EC 55                    3099 	.db #0x55	; 85	'U'
      0000ED 55                    3100 	.db #0x55	; 85	'U'
      0000EE 44                    3101 	.db #0x44	; 68	'D'
      0000EF 44                    3102 	.db #0x44	; 68	'D'
      0000F0 44                    3103 	.db #0x44	; 68	'D'
      0000F1 44                    3104 	.db #0x44	; 68	'D'
      0000F2 44                    3105 	.db #0x44	; 68	'D'
      0000F3 44                    3106 	.db #0x44	; 68	'D'
      0000F4 55                    3107 	.db #0x55	; 85	'U'
      0000F5 55                    3108 	.db #0x55	; 85	'U'
      0000F6 55                    3109 	.db #0x55	; 85	'U'
      0000F7 44                    3110 	.db #0x44	; 68	'D'
      0000F8 55                    3111 	.db #0x55	; 85	'U'
      0000F9 44                    3112 	.db #0x44	; 68	'D'
      0000FA 55                    3113 	.db #0x55	; 85	'U'
      0000FB 44                    3114 	.db #0x44	; 68	'D'
      0000FC 55                    3115 	.db #0x55	; 85	'U'
      0000FD 55                    3116 	.db #0x55	; 85	'U'
      0000FE 55                    3117 	.db #0x55	; 85	'U'
      0000FF 55                    3118 	.db #0x55	; 85	'U'
      000100 55                    3119 	.db #0x55	; 85	'U'
      000101 55                    3120 	.db #0x55	; 85	'U'
      000102 55                    3121 	.db #0x55	; 85	'U'
      000103 55                    3122 	.db #0x55	; 85	'U'
      000104 55                    3123 	.db #0x55	; 85	'U'
      000105 55                    3124 	.db #0x55	; 85	'U'
      000106                       3125 _pool:
      000106 00                    3126 	.db #0x00	; 0
      000107 00                    3127 	.db #0x00	; 0
      000108 00                    3128 	.db #0x00	; 0
      000109 10                    3129 	.db #0x10	; 16
      00010A 40                    3130 	.db #0x40	; 64
      00010B 60                    3131 	.db #0x60	; 96
      00010C 70                    3132 	.db #0x70	; 112	'p'
      00010D 80                    3133 	.db #0x80	; 128
      00010E 80                    3134 	.db #0x80	; 128
      00010F 70                    3135 	.db #0x70	; 112	'p'
      000110 60                    3136 	.db #0x60	; 96
      000111 40                    3137 	.db #0x40	; 64
      000112 10                    3138 	.db #0x10	; 16
      000113 00                    3139 	.db #0x00	; 0
      000114 00                    3140 	.db #0x00	; 0
      000115 00                    3141 	.db #0x00	; 0
                                   3142 	.area INITIALIZER
                                   3143 	.area CABS (ABS)
